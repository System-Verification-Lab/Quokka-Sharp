from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols

c = 0
t = 1
k = 2

h    = symbols('h')
rz   = symbols('rz')

x = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")

X    = symbols('X')
Xc   = symbols('Xc')
Xt   = symbols('Xt')

def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(s):
    for a in s.split("&"):
        print("    cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("])")

def main():

    print("# This code was generated by cliffordt2cnf_py_codegen.py.")
    print("from decimal import Decimal")
    print("import math")
    print()
    print()

    # H:
    F = Equivalent(h, (x[k] & ~X) )
    C = to_cnf(F, True, True)

    print("def H2CNF(cnf, k):")
    print("    x = cnf.vars.x")
    print("    h = cnf.add_var()")
    print("    X = cnf.add_var()")
    print()
    print("    # "+ str(F))
    to_py(      str(C))
    print()
    print("    cnf.vars.x[k] = X")
    print()
    print(f"    cnf.add_weight( h,  Decimal(1/2).sqrt())")
    print(f"    cnf.add_weight(-h, -Decimal(1/2).sqrt())")
    print()


    #CNOT
    Fc = Equivalent(Xc, x[c])
    Cc = to_cnf(Fc, True, True)

    Ft = Equivalent(Xt, (x[c] ^ x[t]))
    Ct = to_cnf(Ft, True, True)

    print("def CNOT2CNF(cnf, c, t):")
    print("    x = cnf.vars.x")
    print("    Xc = cnf.add_var()")
    print("    Xt = cnf.add_var()")
    print()
    print("    # "+ str(Fc))
    to_py(	   str(Cc))
    print()
    print("    # "+ str(Ft))
    to_py(	   str(Ct))
    print()
    print("    cnf.vars.x[c] = Xc")
    print("    cnf.vars.x[t] = Xt")
    print()
  

    #RZ(theta)
    Fx = Equivalent(X, x[k])
    Cx = to_cnf(Fx, True, True)

    Frz = Equivalent(rz, x[k])
    Crz = to_cnf(Frz, True, True)

    print("def CNOT2CNF(cnf, k, cos_theta, sin_theta):")
    print("    x = cnf.vars.x")
    print("    rz = cnf.add_var()")
    print()
    print("    # "+ str(Fx))
    to_py(	   str(Cx))
    print()
    print("    # "+ str(Frz))
    to_py(	   str(Crz))
    print()
    print("    cnf.vars.x[k] = X")
    print()
    print(f"    cnf.add_weight(rz, cos_theta, sin_theta)")
    print(f"    cnf.add_weight(-rz, 1, 0)")
    print()



if __name__ == "__main__":
    main()