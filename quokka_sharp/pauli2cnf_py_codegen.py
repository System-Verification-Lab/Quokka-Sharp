from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols 

r    = symbols('r')
R    = symbols('R')

u    = symbols('u')
U    = symbols('U')
d    = symbols('d')
D    = symbols('D')

u1    = symbols('u1')
u2    = symbols('u2')


c = 0
t = 1
k = 2

x = [0,0,0]
z = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")
z[k] = symbols("z[k]")
z[c] = symbols("z[c]")
z[t] = symbols("z[t]")

X    = symbols('X')
Z    = symbols('Z')

def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(func, prefix="", simplify=True, force=True):
    print(prefix+"        # "+str(func))
    s = str(to_cnf(func, simplify=simplify, force=force))
    for a in s.split("&"):
        print(prefix+"        cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("])")

def add_sign(func, prefix = ""):
    print(prefix+f"        # adding sign if {func}")
    print(prefix+"        R = cnf.add_var()")
    print(prefix+"        if cnf.weighted: ")
    print(prefix+"            cnf.add_weight(R, -1)")
    print(prefix+"            cnf.add_weight(-R, 1)")
    to_py(	                  Equivalent(R, func), prefix+"    ")
    print(prefix+"        else: ")
    print(prefix+"            r = cnf.vars.r")
    print(prefix+"            cnf.vars.r = R")
    to_py(	                  Equivalent(R, r ^ func), prefix+"    ")

def add_sqrt_half(func, prefix = ""):
    print(prefix+f"        # adding sqrt_half if {func}")
    print(prefix+"        U = cnf.add_var()")
    print(prefix+"        if cnf.weighted: ")
    print(prefix+"            cnf.add_weight(U, str(Decimal(1/2).sqrt()))")
    print(prefix+"            cnf.add_weight(-U, 1)")
    to_py(	                  Equivalent(U, func), prefix+"    ")
    print(prefix+"        else: ")
    print(prefix+"            cnf.power_two_normalisation += 0.5 ")
    print(prefix+"            u = cnf.vars.u")
    print(prefix+"            cnf.vars.u = U")
    to_py(	                  Equivalent(U, u ^ ~func), prefix+"    ")
    print()
    print(prefix+"            D = cnf.add_var()")
    print(prefix+"            cnf.add_clause([D, cnf.add_var()])")
    to_py(	                  Equivalent(D, u & ~U), prefix+"    ")

def main():

    print("# This code was generated by pauli2cnf_py_codegen.py.")
    print("import math")
    print("from decimal import Decimal, getcontext")
    print("getcontext().prec = 32")
    print()
    print("class pauli2cnf:")

    # H:
    print("    def H2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    add_sign(x[k] & z[k])
    print()
    print("        x[k], z[k] = z[k], x[k]")
    print()

    # S:
    print("    def S2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        Z = cnf.add_var()")
    to_py(	       Equivalent(Z, x[k] ^ z[k]))
    print()
    add_sign(x[k] & z[k])
    print()
    print("        cnf.vars.z[k] = Z")
    print()

    # X:
    print("    def X2CNF(cnf, k):")
    print("        z = cnf.vars.z")
    print()
    add_sign(z[k])
    print()

    # Y:
    print("    def Y2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    add_sign(x[k] ^ z[k])
    print()

    # Z:
    print("    def Z2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()
    add_sign(x[k])
    print()

    # Sdg:
    print("    def Sdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        Z = cnf.add_var()")
    to_py(	       Equivalent(Z, x[k] ^ z[k]))
    print()
    add_sign(x[k] & ~z[k])
    print()    
    print("        cnf.vars.z[k] = Z")
    print()
    
    # T:
    print("    def T2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()   
    print("        Z = cnf.add_var()")
    to_py(	       x[k] | Equivalent(Z, z[k]))
    print()   
    add_sqrt_half(x[k])
    print()
    add_sign(x[k] & z[k] & ~Z)
    print()
    print("        cnf.vars.z[k] = Z")
    print()

    # Tdag:
    print("    def Tdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        Z = cnf.add_var()")  
    to_py(	       x[k] | Equivalent(Z, z[k]))
    print()   
    add_sqrt_half(x[k])
    print()
    add_sign(x[k] & ~z[k] & Z)
    print()
    print("        cnf.vars.z[k] = Z")  
    print()

    #CNOT
    print("    def CNOT2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        X = cnf.add_var()")
    to_py(	       Equivalent(X, x[t] ^ x[c]))
    print()
    print("        Z = cnf.add_var()")
    to_py(	       Equivalent(Z, z[t] ^ z[c]))
    print()
    add_sign(x[c] & z[t] & (~x[t] ^ z[c]))
    print()
    print("        cnf.vars.x[t] = X")
    print("        cnf.vars.z[c] = Z")
    print()
    
    #CZ
    Z1    = symbols('Z1')
    Z2    = symbols('Z2')
    print("    def CZ2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        Z1 = cnf.add_var()")
    to_py(	       Equivalent(Z1, z[c] ^ x[t]))
    print()
    print("        Z2 = cnf.add_var()")
    to_py(	       Equivalent(Z2, z[t] ^ x[c]))
    print()
    add_sign(x[t] & x[c] & (z[t] ^ z[c]))
    print()
    print("        cnf.vars.z[c] = Z1")
    print("        cnf.vars.z[t] = Z2")
    print()

    #RZ
    print("    def RZ2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        Z = cnf.add_var()")
    to_py(	       x[k] | Equivalent(Z, z[k]))
    print()
    print("        u1 = cnf.add_var()")
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    to_py(	       Equivalent(u1, x[k] & (((z[k] & Z)) | (~z[k] & ~Z))))
    print()   
    print("        u2 = cnf.add_var()")
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")
    to_py(	       Equivalent(u2, x[k] & (((~z[k] & Z)) | (z[k] & ~Z))))
    print()
    add_sign(x[k] & z[k] & ~Z)
    print()
    print("        cnf.vars.z[k] = Z")
    print()

    #RX
    print("    def RX2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        X = cnf.add_var()")
    to_py(	       z[k] | Equivalent(X, x[k]))
    print()   
    print("        u1 = cnf.add_var()")
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    to_py(	       Equivalent(u1, z[k] & ((x[k] & X) | (~x[k] & ~X))))
    print()   
    print("        u2 = cnf.add_var()")
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")
    to_py(	       Equivalent(u2, z[k] & ((~x[k] & X) | (x[k] & ~X))))
    print()
    add_sign(z[k] & ~x[k] & X)
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print()
  
    # composiotion layer
    print(f'''
 
    def Composition(cnf, composition_dictionary):
        x, z = zip(*[(cnf.add_var(), cnf.add_var()) for _ in range(cnf.n)])
        comp = cnf.add_var()
        weights = []
        sum_weights = 0
        for pauli_str, alpha in composition_dictionary["composition"].items():
            a = complex(alpha)
            if a == 0:
                continue
            a_r = a.real
            a_i = a.imag

            # pauli conditions
            conditions = []
            for i in range(len(pauli_str)):
                P = pauli_str[cnf.n-1-i]
                if P in ["I", "Z"]:
                    conditions.append(-x[i])
                else:
                    conditions.append( x[i])
                if P in ["I", "X"]:
                    conditions.append(-z[i])
                else:
                    conditions.append( z[i])

            # condition weight
            wr = cnf.add_var()
            wi = cnf.add_var()
            cnf.add_weight(wr, a_r, comment=pauli_str)
            cnf.add_weight(-wr, 1)
            weights.append(wr)
            cnf.add_weight(wi, a_i, comment=pauli_str)
            cnf.add_weight(-wi, 1)
            weights.append(wi)
            sum_weights += alpha**2

            # w => pauli_str
            [cnf.add_clause([-wr, c]) for c in conditions]
            [cnf.add_clause([-wi, c]) for c in conditions]
            cnf.add_clause([-wi, comp])
            cnf.add_clause([-wr, comp])

        # [at least] one of the weights (more than one will lead to a contradiction of the conditions)
        cnf.add_clause(weights)
        if sum_weights != 1:
            # WARNNING: not normalized
            w = cnf.add_var()
            cnf.add_weight(w, str(Decimal(1/sum_weights).sqrt()), comment="normalize")
            cnf.add_weight(-w, 1)
            cnf.add_clause([w])
          
        return x,z,comp
    ''')

    print(f'''
    def Composition2CNF(cnf, composition_dictionary):
        assert composition_dictionary["qubits"] == cnf.n
        lx, lz, lc = pauli2cnf.Composition(cnf, composition_dictionary)
        rx, rz, rc = pauli2cnf.Composition(cnf, composition_dictionary)
        x = cnf.vars.x
        z = cnf.vars.z
        Xs = [cnf.add_var() for _ in range(cnf.n)]
        Zs = [cnf.add_var() for _ in range(cnf.n)]

        # applying the conditions
        for k in range(cnf.n):
            X = Xs[k]
            Z = Zs[k]
    ''')
    lx = symbols('lx[k]')
    lz = symbols('lz[k]')
    rx = symbols('rx[k]')
    rz = symbols('rz[k]')

    to_py(Equivalent(X, lx^x[k]^rx), prefix="    ")
    to_py(Equivalent(Z, lz^z[k]^rz), prefix="    ")

    add_sign(And(Or((  lx & ~x[k] &  rx),
                    ( ~lx &  x[k] & ~rx),
                    (  lz & ~z[k] &  rz),
                    ( ~lz &  z[k] & ~rz)),
                 Or(lx, lz),
                 Or(x[k], z[k])), prefix="    ")
    
    to_py(Or(And(Equivalent(lx,x[k]),
                 Equivalent(lz,z[k])),
             And(Equivalent(rx,x[k]),
                 Equivalent(rz,z[k])),
             And(Equivalent(lx,rx),
                 Equivalent(lz,rz))), prefix="    ")
    
    rc = symbols('rc')
    lc = symbols('lc')
    to_py(Equivalent(rc, lc), prefix="")

    print(f'''
        cnf.vars.x = Xs
        cnf.vars.z = Zs
    ''')

    print()
    print()


    # Synthesis

    # dynamic single bit gate:

    idg   = symbols('idg[k]')
    hg    = symbols('hg')
    # sg    = symbols('sg')
    tg    = symbols('tg')
    td    = symbols('td')

    Xk = symbols('X[k]')
    Zk = symbols('Z[k]')
    Rk = symbols('R[k]')
    Uk = symbols('U[k]')

    I_r = idg >> Equivalent(Rk, False)
    I_x = idg >> Equivalent(Xk, x[k])
    I_z = idg >> Equivalent(Zk, z[k])
    I_u = idg >> Equivalent(Uk, False)

    H_r = hg >> Equivalent(Rk, x[k] & z[k])
    H_x = hg >> Equivalent(Xk, z[k])
    H_z = hg >> Equivalent(Zk, x[k])
    H_u = hg >> Equivalent(Uk, False)

    # S_r = sg >> Equivalent(Rk, x[k] & z[k])
    # S_x = sg >> Equivalent(Xk, x[k])
    # S_z = sg >> Equivalent(Zk, x[k] ^ z[k])
    # S_u = sg >> Equivalent(Uk, False)

    T_r = tg >> Equivalent(Rk, x[k] & z[k] & ~Zk)
    Tdg_r = td >> Equivalent(Rk, x[k] & ~z[k] & Zk)
    T_x = (tg | td) >> Equivalent(Xk, x[k])
    T_z = (tg | td) >> Equivalent(Zk, z[k]) | x[k]
    T_u = (tg | td) >> Equivalent(Uk, x[k])

    # single_qb_gate_properties = [I_r, I_x, I_z, I_u, H_r, H_x, H_z, H_u, S_r, S_x, S_z, S_u, T_r, T_x, T_z, T_u]
    single_qb_gate_properties = [I_r, I_x, I_z, I_u, H_r, H_x, H_z, H_u, Tdg_r, T_r, T_x, T_z, T_u]
    

    # dynamic two bit gate:

    cg_ct    = symbols('cg[c][t]')
    Xc = symbols('X[c]')
    Xt = symbols('X[t]')
    Zc = symbols('Z[c]')
    Zt = symbols('Z[t]')
    Rc = symbols('R[c]')
    Rt = symbols('R[t]')
    Uc = symbols('U[c]')
    Ut = symbols('U[t]')

    CX_xc = cg_ct >> Equivalent(Xc, x[c])
    CX_xt = cg_ct >> Equivalent(Xt, x[t] ^ x[c])
    CX_zc = cg_ct >> Equivalent(Zc, z[t] ^ z[c])
    CX_zt = cg_ct >> Equivalent(Zt, z[t])
    CX_rc = cg_ct >> Equivalent(Rc, x[c] & z[t] & (~x[t] ^ z[c]))
    CX_rt = cg_ct >> Equivalent(Rt, False)
    CX_uc = cg_ct >> Equivalent(Uc, False)
    CX_ut = cg_ct >> Equivalent(Ut, False)

    double_qb_gate_properties = [CX_xc, CX_xt, CX_zc, CX_zt, CX_rc, CX_rt, CX_uc, CX_ut]

    # CZ_xc = cg_ct >> Equivalent(Xc, x[c])
    # CZ_xt = cg_ct >> Equivalent(Xt, x[t])
    # CZ_zc = cg_ct >> Equivalent(Zc, z[c] ^ x[t])
    # CZ_zt = cg_ct >> Equivalent(Zt, z[t] ^ x[c])
    # CZ_rc = cg_ct >> Equivalent(Rc, x[t] & x[c] & (z[t] ^ z[c]))
    # CZ_rt = cg_ct >> Equivalent(Rt, False)
    # CZ_uc = cg_ct >> Equivalent(Uc, False)
    # CZ_ut = cg_ct >> Equivalent(Ut, False)

    # double_qb_gate_properties = [CZ_xc, CZ_xt, CZ_zc, CZ_zt, CZ_rc, CZ_rt, CZ_uc, CZ_ut]


    l_idg   = symbols('l_idg')
    l_hg    = symbols('l_hg')
    l_tg    = symbols('l_tg')
    l_td    = symbols('l_td')
    l_cg    = symbols('l_cg')

    E_hg = l_hg >> ~hg
    E_tg = l_tg >> ~td
    E_td = l_td >> ~tg
    efficiency_properties = [E_hg, E_tg, E_td]
    
    print('''
    def AMO(cnf, var_list):
        assert None not in var_list
        # at least one:
        cnf.add_clause(var_list)
        # at most one:
        [cnf.add_clause([-var_list[a],-var_list[b]]) for a in range(len(var_list)) for b in range(a+1, len(var_list))]
    ''')
    print()
    print()
    print("    def SynLayer2CNF(cnf):")
    print("        n = cnf.n + cnf.ancilas")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        X = [cnf.add_var() for _ in range(n)]")
    print("        Z = [cnf.add_var() for _ in range(n)]")
    print("        R = [cnf.add_var() for _ in range(n)]")
    print("        U = [cnf.add_var() for _ in range(n)]")
    print("        [cnf.add_weight(R[k], -1) for k in range(n)]")
    print("        [cnf.add_weight(-R[k], 1) for k in range(n)]")
    print("        [cnf.add_weight(U[k], str(Decimal(1/2).sqrt())) for k in range(n)]")
    print("        [cnf.add_weight(-U[k], 1) for k in range(n)]")
    print("        cg = [[None for _ in range(n)] for _ in range(n)]")
    print("        idg = [None for _ in range(n)]")
    print("        for k in range(n):")
    print("            idg[k] = cnf.add_var(syn_gate_pick = True, Name = 'id', bits = [k])")
    print("            hg = cnf.add_var(syn_gate_pick = True, Name = 'h', bits = [k])")
    # print("            sg = cnf.add_var(syn_gate_pick = True, Name = 's', bits = [k])")
    print("            td = cnf.add_var(syn_gate_pick = True, Name = 'tdg', bits = [k])")
    print("            tg = cnf.add_var(syn_gate_pick = True, Name = 't', bits = [k])")
    for p in single_qb_gate_properties:
        to_py(	       p, prefix="    ")
    print("            c = k")
    print("            for t in range(n):")
    print("                if t!=c:")
    print("                    cg[c][t] = cnf.add_var(syn_gate_pick = True, Name = 'cx', bits = [c,t])")
    for p in double_qb_gate_properties:
        to_py(	           p, prefix="            ")    
    print("        for k in range(n):")
    # print("            gate_controlers = [idg, hg, sg, tg]+[cg[i][k] for i in range(k)]+[cg[k][i] for i in range(k+1,n)]")
    print("            gate_controlers = [idg[k], hg, td, tg]+[cg[i][k] for i in range(n) if i!=k]+[cg[k][i] for i in range(n) if i!=k]")
    print("            pauli2cnf.AMO(cnf, gate_controlers)")
    print()
    print("            l_idg = cnf.get_syn_var_last_layer(Name ='id', bit = k)")
    print("            l_hg = cnf.get_syn_var_last_layer(Name ='h', bit = k)")
    print("            l_tg = cnf.get_syn_var_last_layer(Name ='t', bit = k)")
    print("            l_td = cnf.get_syn_var_last_layer(Name ='tdg', bit = k)")
    print()
    print("            if cnf.syn_gate_layer>1:")
    print("                assert None not in [l_idg, idg[k], l_hg, l_tg, l_td]")
    print("                cgs = [cg[k][i] for i in range(n) if i!=k]")
    print("                assert None not in cgs")
    print("                cnf.add_clause(cgs + [idg[k], -l_idg])")
    for p in efficiency_properties:
        to_py(	           p, prefix="        ")    
    print()
    print("        cnf.vars.x[:n] = X")
    print("        cnf.vars.z[:n] = Z")
    print()



if __name__ == "__main__":
    main()
