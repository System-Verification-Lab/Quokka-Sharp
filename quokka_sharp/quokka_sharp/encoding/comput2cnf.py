# This code was generated by comput2cnf_py_codegen.py.
from decimal import Decimal
import math
from decimal import Decimal, getcontext
getcontext().prec = 32

class comput2cnf:

    def H2CNF(cnf, k):
        x = cnf.vars.x
        X = cnf.add_var()
        h = cnf.add_var()

        # Equivalent(h, ~X | ~x[k])
        cnf.add_clause([ X,  h])
        cnf.add_clause([ h,  x[k]])
        cnf.add_clause([-X, -h, -x[k]])

        cnf.vars.x[k] = X

        cnf.add_weight( h,  Decimal(math.sqrt(1/2)))
        cnf.add_weight(-h, -Decimal(math.sqrt(1/2)))

    def Y2CNF(cnf, k):
        x = cnf.vars.x
        X = cnf.add_var()
        h = cnf.add_var()

        # Equivalent(X, ~x[k])
        cnf.add_clause([ X,  x[k]])
        cnf.add_clause([-X, -x[k]])

        # Equivalent(h, ~x[k])
        cnf.add_clause([ h,  x[k]])
        cnf.add_clause([-h, -x[k]])

        cnf.vars.x[k] = X

        cnf.add_weight( h, 0,  1)
        cnf.add_weight(-h, 0, -1)

    def CNOT2CNF(cnf, c, t):
        x = cnf.vars.x
        Xc = cnf.add_var()
        Xt = cnf.add_var()

        # Equivalent(Xc, x[c])
        cnf.add_clause([ Xc, -x[c]])
        cnf.add_clause([-Xc,  x[c]])

        # Equivalent(Xt, x[c] ^ x[t])
        cnf.add_clause([ Xt,  x[c], -x[t]])
        cnf.add_clause([ Xt, -x[c],  x[t]])
        cnf.add_clause([-Xt,  x[c],  x[t]])
        cnf.add_clause([-Xt, -x[c], -x[t]])

        cnf.vars.x[c] = Xc
        cnf.vars.x[t] = Xt

    def RZ2CNF(cnf, k, theta):
        x = cnf.vars.x
        X = cnf.add_var()
        h = cnf.add_var()

        # Equivalent(X, x[k])
        cnf.add_clause([ X, -x[k]])
        cnf.add_clause([-X,  x[k]])

        # Equivalent(h, x[k])
        cnf.add_clause([ h, -x[k]])
        cnf.add_clause([-h,  x[k]])

        cnf.vars.x[k] = X

        cnf.add_weight(h, 1, 0)
        cnf.add_weight(-h, Decimal(math.cos(theta)), -Decimal(math.sin(theta)))

    def Z2CNF(cnf, k):
        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi))

    def S2CNF(cnf, k):
        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi/2))

    def Sdg2CNF(cnf, k):
        comput2cnf.RZ2CNF(cnf, k, Decimal(-math.pi/2))

    def T2CNF(cnf, k):
        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi/4))

    def Tdg2CNF(cnf, k):
        comput2cnf.RZ2CNF(cnf, k, Decimal(-math.pi/4))

    def X2CNF(cnf, k):
        x = cnf.vars.x
        X = cnf.add_var()

        # Equivalent(X, ~x[k])
        cnf.add_clause([ X,  x[k]])
        cnf.add_clause([-X, -x[k]])

        cnf.vars.x[k] = X

    def RX2CNF(cnf, k, theta):
        x = cnf.vars.x
        X = cnf.add_var()
        h = cnf.add_var()

        # Equivalent(h, Equivalent(X, x[k]))
        cnf.add_clause([ X,  h,  x[k]])
        cnf.add_clause([ X, -h, -x[k]])
        cnf.add_clause([-X,  h, -x[k]])
        cnf.add_clause([-X, -h,  x[k]])

        cnf.vars.x[k] = X

        cnf.add_weight(h, Decimal(math.cos(theta/2)), 0)
        cnf.add_weight(-h, 0, -Decimal(math.sin(theta/2)))

    def CZ2CNF(cnf, c, t):
        x = cnf.vars.x
        Xc = cnf.add_var()
        Xt = cnf.add_var()
        h = cnf.add_var()

        # Equivalent(Xc, x[c])
        cnf.add_clause([ Xc, -x[c]])
        cnf.add_clause([-Xc,  x[c]])

        # Equivalent(Xt, x[t])
        cnf.add_clause([ Xt, -x[t]])
        cnf.add_clause([-Xt,  x[t]])

        # Equivalent(h, x[c] & x[t])
        cnf.add_clause([-h,  x[c]])
        cnf.add_clause([-h,  x[t]])
        cnf.add_clause([ h, -x[c], -x[t]])

        cnf.vars.x[c] = Xc
        cnf.vars.x[t] = Xt

        cnf.add_weight( h, 0, -1)
        cnf.add_weight(-h, 0,  1)

