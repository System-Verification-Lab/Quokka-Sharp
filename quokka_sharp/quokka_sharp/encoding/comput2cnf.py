# This code was generated by comput2cnf_py_codegen.py.
from decimal import Decimal
import math
from decimal import Decimal, getcontext
getcontext().prec = 32
from .pauli2cnf import pauli2cnf

class comput2cnf:

    def H2CNF(cnf, k):
        x = cnf.vars.x

        X = cnf.add_var()

        U = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(U, str(Decimal(1/2).sqrt()))
            cnf.add_weight(-U, 1)
            # U
            cnf.add_clause([ U], comment="sqrt ")
        else: 
            cnf.power_two_normalisation += 0.5 
            u = cnf.vars.u
            cnf.vars.u = U
            # Equivalent(U, u)
            cnf.add_clause([ U, -u], comment="sqrt U update ")
            cnf.add_clause([-U,  u], comment="sqrt U update ")

            D = cnf.add_var()
            cnf.add_clause([D, cnf.add_var()], comment="sqrt D double ")
            # Equivalent(D, u & ~U)
            cnf.add_clause([-D,  u], comment="sqrt D update ")
            cnf.add_clause([-D, -U], comment="sqrt D update ")
            cnf.add_clause([ D,  U, -u], comment="sqrt D update ")

        # adding sign if X & x[k]
        R = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(R, -1)
            cnf.add_weight(-R, 1)
            # Equivalent(R, X & x[k])
            cnf.add_clause([-R,  X], comment="- ")
            cnf.add_clause([-R,  x[k]], comment="- ")
            cnf.add_clause([ R, -X, -x[k]], comment="- ")
        else: 
            r = cnf.vars.r
            cnf.vars.r = R
            # Equivalent(R, r ^ (X & x[k]))
            cnf.add_clause([ R,  X, -r], comment="- ")
            cnf.add_clause([ R, -r,  x[k]], comment="- ")
            cnf.add_clause([-R,  X,  r], comment="- ")
            cnf.add_clause([-R,  r,  x[k]], comment="- ")
            cnf.add_clause([ R, -X,  r, -x[k]], comment="- ")
            cnf.add_clause([-R, -X, -r, -x[k]], comment="- ")

        cnf.vars.x[k] = X

    def CNOT2CNF(cnf, c, t):
        x = cnf.vars.x

        Xt = cnf.add_var()
        # Equivalent(Xt, x[c] ^ x[t])
        cnf.add_clause([ Xt,  x[c], -x[t]])
        cnf.add_clause([ Xt, -x[c],  x[t]])
        cnf.add_clause([-Xt,  x[c],  x[t]])
        cnf.add_clause([-Xt, -x[c], -x[t]])

        cnf.vars.x[t] = Xt

    def CCX2CNF(cnf, k, c, t):
        x = cnf.vars.x

        Xt = cnf.add_var()
        # Equivalent(Xt, x[t] ^ (x[c] & x[k]))
        cnf.add_clause([ Xt,  x[c], -x[t]])
        cnf.add_clause([ Xt,  x[k], -x[t]])
        cnf.add_clause([-Xt,  x[c],  x[t]])
        cnf.add_clause([-Xt,  x[k],  x[t]])
        cnf.add_clause([ Xt, -x[c], -x[k],  x[t]])
        cnf.add_clause([-Xt, -x[c], -x[k], -x[t]])

        cnf.vars.x[t] = Xt

    def Z2CNF(cnf, k):
        x = cnf.vars.x

        # adding sign if x[k]
        R = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(R, -1)
            cnf.add_weight(-R, 1)
            # Equivalent(R, x[k])
            cnf.add_clause([ R, -x[k]], comment="- ")
            cnf.add_clause([-R,  x[k]], comment="- ")
        else: 
            r = cnf.vars.r
            cnf.vars.r = R
            # Equivalent(R, r ^ x[k])
            cnf.add_clause([ R,  r, -x[k]], comment="- ")
            cnf.add_clause([ R, -r,  x[k]], comment="- ")
            cnf.add_clause([-R,  r,  x[k]], comment="- ")
            cnf.add_clause([-R, -r, -x[k]], comment="- ")

    def RZ2CNF(cnf, k, theta):
        x = cnf.vars.x

        w = cnf.add_var()
        cnf.add_weight(w, Decimal(math.cos(theta)), Decimal(math.sin(theta)))
        cnf.add_weight(-w, 1, 0)
        # Equivalent(w, x[k])
        cnf.add_clause([ w, -x[k]], comment="w (RZ)")
        cnf.add_clause([-w,  x[k]], comment="w (RZ)")

    def S2CNF(cnf, k):
        x = cnf.vars.x

        # adding i if x[k]
        I = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(I, 0, 1)
            cnf.add_weight(-I, 1, 0)
            # Equivalent(I, x[k])
            cnf.add_clause([ I, -x[k]], comment="i (S)")
            cnf.add_clause([-I,  x[k]], comment="i (S)")
        else: 
            i = cnf.vars.i
            # Equivalent(I, i ^ x[k])
            cnf.add_clause([ I,  i, -x[k]], comment="i (S)")
            cnf.add_clause([ I, -i,  x[k]], comment="i (S)")
            cnf.add_clause([-I,  i,  x[k]], comment="i (S)")
            cnf.add_clause([-I, -i, -x[k]], comment="i (S)")
            # adding sign if i & ~I
            R = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(R, -1)
                cnf.add_weight(-R, 1)
                # Equivalent(R, i & ~I)
                cnf.add_clause([-R,  i], comment="- ")
                cnf.add_clause([-I, -R], comment="- ")
                cnf.add_clause([ I,  R, -i], comment="- ")
            else: 
                r = cnf.vars.r
                cnf.vars.r = R
                # Equivalent(R, r ^ (i & ~I))
                cnf.add_clause([ R,  i, -r], comment="- ")
                cnf.add_clause([-R,  i,  r], comment="- ")
                cnf.add_clause([-I,  R, -r], comment="- ")
                cnf.add_clause([-I, -R,  r], comment="- ")
                cnf.add_clause([ I,  R, -i,  r], comment="- ")
                cnf.add_clause([ I, -R, -i, -r], comment="- ")
            cnf.vars.i = I

    def Sdg2CNF(cnf, k):
        x = cnf.vars.x
        if cnf.weighted: 
            w = cnf.add_var()
            cnf.add_weight(w, 0, -1)
            cnf.add_weight(-w, 1, 0)
            # Equivalent(w, x[k])
            cnf.add_clause([ w, -x[k]], comment="w (Sdg)")
            cnf.add_clause([-w,  x[k]], comment="w (Sdg)")
        else:
            # adding i if x[k]
            I = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(I, 0, 1)
                cnf.add_weight(-I, 1, 0)
                # Equivalent(I, x[k])
                cnf.add_clause([ I, -x[k]], comment="i (Sdg)")
                cnf.add_clause([-I,  x[k]], comment="i (Sdg)")
            else: 
                i = cnf.vars.i
                # Equivalent(I, i ^ x[k])
                cnf.add_clause([ I,  i, -x[k]], comment="i (Sdg)")
                cnf.add_clause([ I, -i,  x[k]], comment="i (Sdg)")
                cnf.add_clause([-I,  i,  x[k]], comment="i (Sdg)")
                cnf.add_clause([-I, -i, -x[k]], comment="i (Sdg)")
                # adding sign if i & ~I
                R = cnf.add_var()
                if cnf.weighted: 
                    cnf.add_weight(R, -1)
                    cnf.add_weight(-R, 1)
                    # Equivalent(R, i & ~I)
                    cnf.add_clause([-R,  i], comment="- ")
                    cnf.add_clause([-I, -R], comment="- ")
                    cnf.add_clause([ I,  R, -i], comment="- ")
                else: 
                    r = cnf.vars.r
                    cnf.vars.r = R
                    # Equivalent(R, r ^ (i & ~I))
                    cnf.add_clause([ R,  i, -r], comment="- ")
                    cnf.add_clause([-R,  i,  r], comment="- ")
                    cnf.add_clause([-I,  R, -r], comment="- ")
                    cnf.add_clause([-I, -R,  r], comment="- ")
                    cnf.add_clause([ I,  R, -i,  r], comment="- ")
                    cnf.add_clause([ I, -R, -i, -r], comment="- ")
                cnf.vars.i = I

            # adding sign if x[k]
            R = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(R, -1)
                cnf.add_weight(-R, 1)
                # Equivalent(R, x[k])
                cnf.add_clause([ R, -x[k]], comment="- (Sdg)")
                cnf.add_clause([-R,  x[k]], comment="- (Sdg)")
            else: 
                r = cnf.vars.r
                cnf.vars.r = R
                # Equivalent(R, r ^ x[k])
                cnf.add_clause([ R,  r, -x[k]], comment="- (Sdg)")
                cnf.add_clause([ R, -r,  x[k]], comment="- (Sdg)")
                cnf.add_clause([-R,  r,  x[k]], comment="- (Sdg)")
                cnf.add_clause([-R, -r, -x[k]], comment="- (Sdg)")

    def T2CNF(cnf, k):
        x = cnf.vars.x
        if cnf.weighted: 
            w = cnf.add_var()
            cnf.add_weight(w, str(Decimal(1/2).sqrt()), str(Decimal(1/2).sqrt()))
            cnf.add_weight(-w, 1, 0)
            # Equivalent(w, x[k])
            cnf.add_clause([ w, -x[k]], comment="w (T)")
            cnf.add_clause([-w,  x[k]], comment="w (T)")
        else:
            i = cnf.vars.i

            I = cnf.add_var()
            # x[k] | (Equivalent(I, i))
            cnf.add_clause([ I, -i,  x[k]], comment="I (T)")
            cnf.add_clause([-I,  i,  x[k]], comment="I (T)")

            # adding sign if i & ~I
            R = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(R, -1)
                cnf.add_weight(-R, 1)
                # Equivalent(R, i & ~I)
                cnf.add_clause([-R,  i], comment="- (T)")
                cnf.add_clause([-I, -R], comment="- (T)")
                cnf.add_clause([ I,  R, -i], comment="- (T)")
            else: 
                r = cnf.vars.r
                cnf.vars.r = R
                # Equivalent(R, r ^ (i & ~I))
                cnf.add_clause([ R,  i, -r], comment="- (T)")
                cnf.add_clause([-R,  i,  r], comment="- (T)")
                cnf.add_clause([-I,  R, -r], comment="- (T)")
                cnf.add_clause([-I, -R,  r], comment="- (T)")
                cnf.add_clause([ I,  R, -i,  r], comment="- (T)")
                cnf.add_clause([ I, -R, -i, -r], comment="- (T)")

            U = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(U, str(Decimal(1/2).sqrt()))
                cnf.add_weight(-U, 1)
                # Equivalent(U, x[k])
                cnf.add_clause([ U, -x[k]], comment="sqrt (T)")
                cnf.add_clause([-U,  x[k]], comment="sqrt (T)")
            else: 
                cnf.power_two_normalisation += 0.5 
                u = cnf.vars.u
                cnf.vars.u = U
                # Equivalent(U, u ^ ~x[k])
                cnf.add_clause([ U,  u,  x[k]], comment="sqrt U update (T)")
                cnf.add_clause([ U, -u, -x[k]], comment="sqrt U update (T)")
                cnf.add_clause([-U,  u, -x[k]], comment="sqrt U update (T)")
                cnf.add_clause([-U, -u,  x[k]], comment="sqrt U update (T)")

                D = cnf.add_var()
                cnf.add_clause([D, cnf.add_var()], comment="sqrt D double (T)")
                # Equivalent(D, u & ~U)
                cnf.add_clause([-D,  u], comment="sqrt D update (T)")
                cnf.add_clause([-D, -U], comment="sqrt D update (T)")
                cnf.add_clause([ D,  U, -u], comment="sqrt D update (T)")

            cnf.vars.i = I
    def Tdg2CNF(cnf, k):
        x = cnf.vars.x
        if cnf.weighted: 
            w = cnf.add_var()
            cnf.add_weight(w, str(Decimal(1/2).sqrt()), str(-Decimal(1/2).sqrt()))
            cnf.add_weight(-w, 1, 0)
            # Equivalent(w, x[k])
            cnf.add_clause([ w, -x[k]], comment="w (Tdg)")
            cnf.add_clause([-w,  x[k]], comment="w (Tdg)")
        else:
            i = cnf.vars.i

            I = cnf.add_var()
            # x[k] | (Equivalent(I, i))
            cnf.add_clause([ I, -i,  x[k]], comment="I (Tdg)")
            cnf.add_clause([-I,  i,  x[k]], comment="I (Tdg)")

            # adding sign if I & ~i
            R = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(R, -1)
                cnf.add_weight(-R, 1)
                # Equivalent(R, I & ~i)
                cnf.add_clause([ I, -R], comment="- (Tdg)")
                cnf.add_clause([-R, -i], comment="- (Tdg)")
                cnf.add_clause([-I,  R,  i], comment="- (Tdg)")
            else: 
                r = cnf.vars.r
                cnf.vars.r = R
                # Equivalent(R, r ^ (I & ~i))
                cnf.add_clause([ I,  R, -r], comment="- (Tdg)")
                cnf.add_clause([ I, -R,  r], comment="- (Tdg)")
                cnf.add_clause([ R, -i, -r], comment="- (Tdg)")
                cnf.add_clause([-R, -i,  r], comment="- (Tdg)")
                cnf.add_clause([-I,  R,  i,  r], comment="- (Tdg)")
                cnf.add_clause([-I, -R,  i, -r], comment="- (Tdg)")

            U = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(U, str(Decimal(1/2).sqrt()))
                cnf.add_weight(-U, 1)
                # Equivalent(U, x[k])
                cnf.add_clause([ U, -x[k]], comment="sqrt (Tdg)")
                cnf.add_clause([-U,  x[k]], comment="sqrt (Tdg)")
            else: 
                cnf.power_two_normalisation += 0.5 
                u = cnf.vars.u
                cnf.vars.u = U
                # Equivalent(U, u ^ ~x[k])
                cnf.add_clause([ U,  u,  x[k]], comment="sqrt U update (Tdg)")
                cnf.add_clause([ U, -u, -x[k]], comment="sqrt U update (Tdg)")
                cnf.add_clause([-U,  u, -x[k]], comment="sqrt U update (Tdg)")
                cnf.add_clause([-U, -u,  x[k]], comment="sqrt U update (Tdg)")

                D = cnf.add_var()
                cnf.add_clause([D, cnf.add_var()], comment="sqrt D double (Tdg)")
                # Equivalent(D, u & ~U)
                cnf.add_clause([-D,  u], comment="sqrt D update (Tdg)")
                cnf.add_clause([-D, -U], comment="sqrt D update (Tdg)")
                cnf.add_clause([ D,  U, -u], comment="sqrt D update (Tdg)")

            cnf.vars.i = I
    def X2CNF(cnf, k):
        x = cnf.vars.x

        X = cnf.add_var()
        # Equivalent(X, ~x[k])
        cnf.add_clause([ X,  x[k]])
        cnf.add_clause([-X, -x[k]])

        cnf.vars.x[k] = X

    def Y2CNF(cnf, k):
        x = cnf.vars.x

        X = cnf.add_var()
        # Equivalent(X, ~x[k])
        cnf.add_clause([ X,  x[k]], comment="Y gate")
        cnf.add_clause([-X, -x[k]], comment="Y gate")

        # adding sign if x[k]
        R = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(R, -1)
            cnf.add_weight(-R, 1)
            # Equivalent(R, x[k])
            cnf.add_clause([ R, -x[k]], comment="- ")
            cnf.add_clause([-R,  x[k]], comment="- ")
        else: 
            r = cnf.vars.r
            cnf.vars.r = R
            # Equivalent(R, r ^ x[k])
            cnf.add_clause([ R,  r, -x[k]], comment="- ")
            cnf.add_clause([ R, -r,  x[k]], comment="- ")
            cnf.add_clause([-R,  r,  x[k]], comment="- ")
            cnf.add_clause([-R, -r, -x[k]], comment="- ")

        # adding i if True
        I = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(I, 0, 1)
            cnf.add_weight(-I, 1, 0)
            # I
            cnf.add_clause([ I], comment="i ")
        else: 
            i = cnf.vars.i
            # Equivalent(I, ~i)
            cnf.add_clause([ I,  i], comment="i ")
            cnf.add_clause([-I, -i], comment="i ")
            # adding sign if i & ~I
            R = cnf.add_var()
            if cnf.weighted: 
                cnf.add_weight(R, -1)
                cnf.add_weight(-R, 1)
                # Equivalent(R, i & ~I)
                cnf.add_clause([-R,  i], comment="- ")
                cnf.add_clause([-I, -R], comment="- ")
                cnf.add_clause([ I,  R, -i], comment="- ")
            else: 
                r = cnf.vars.r
                cnf.vars.r = R
                # Equivalent(R, r ^ (i & ~I))
                cnf.add_clause([ R,  i, -r], comment="- ")
                cnf.add_clause([-R,  i,  r], comment="- ")
                cnf.add_clause([-I,  R, -r], comment="- ")
                cnf.add_clause([-I, -R,  r], comment="- ")
                cnf.add_clause([ I,  R, -i,  r], comment="- ")
                cnf.add_clause([ I, -R, -i, -r], comment="- ")
            cnf.vars.i = I

        cnf.vars.x[k] = X

    def RX2CNF(cnf, k, theta):
        x = cnf.vars.x
        X = cnf.add_var()

        w = cnf.add_var()
        # Equivalent(w, Equivalent(X, x[k]))
        cnf.add_clause([ X,  w,  x[k]])
        cnf.add_clause([ X, -w, -x[k]])
        cnf.add_clause([-X,  w, -x[k]])
        cnf.add_clause([-X, -w,  x[k]])

        cnf.vars.x[k] = X

        cnf.add_weight(w, Decimal(math.cos(theta/2)), 0)
        cnf.add_weight(-w, 0, -Decimal(math.sin(theta/2)))

    def CZ2CNF(cnf, c, t):
        x = cnf.vars.x

        Xc = cnf.add_var()
        # Equivalent(Xc, x[c])
        cnf.add_clause([ Xc, -x[c]])
        cnf.add_clause([-Xc,  x[c]])

        Xt = cnf.add_var()
        # Equivalent(Xt, x[t])
        cnf.add_clause([ Xt, -x[t]])
        cnf.add_clause([-Xt,  x[t]])

        cnf.vars.x[c] = Xc
        cnf.vars.x[t] = Xt

        # adding sign if x[c] & x[t]
        R = cnf.add_var()
        if cnf.weighted: 
            cnf.add_weight(R, -1)
            cnf.add_weight(-R, 1)
            # Equivalent(R, x[c] & x[t])
            cnf.add_clause([-R,  x[c]], comment="- ")
            cnf.add_clause([-R,  x[t]], comment="- ")
            cnf.add_clause([ R, -x[c], -x[t]], comment="- ")
        else: 
            r = cnf.vars.r
            cnf.vars.r = R
            # Equivalent(R, r ^ (x[c] & x[t]))
            cnf.add_clause([ R, -r,  x[c]], comment="- ")
            cnf.add_clause([ R, -r,  x[t]], comment="- ")
            cnf.add_clause([-R,  r,  x[c]], comment="- ")
            cnf.add_clause([-R,  r,  x[t]], comment="- ")
            cnf.add_clause([ R,  r, -x[c], -x[t]], comment="- ")
            cnf.add_clause([-R, -r, -x[c], -x[t]], comment="- ")




    def SynLayer2CNF(cnf):
        n = cnf.n
        x = cnf.vars.x
        X = [cnf.add_var() for _ in range(n)]
        R = [cnf.add_var() for _ in range(n)]
        U = [cnf.add_var() for _ in range(n)]
        Wp = [cnf.add_var() for _ in range(n)]
        # Wn = [cnf.add_var() for _ in range(n)]
        [cnf.add_weight(R[k], -1) for k in range(n)]
        [cnf.add_weight(-R[k], 1) for k in range(n)]
        [cnf.add_weight(U[k], str(Decimal(1/2).sqrt())) for k in range(n)]
        [cnf.add_weight(-U[k], 1) for k in range(n)]
        [cnf.add_weight(Wp[k], str(Decimal(1/2).sqrt()), str(Decimal(1/2).sqrt())) for k in range(n)]
        [cnf.add_weight(-Wp[k], 1, 0) for k in range(n)]
        # [cnf.add_weight(Wn[k], str(Decimal(1/2).sqrt()), str(-Decimal(1/2).sqrt())) for k in range(n)]
        # [cnf.add_weight(-Wn[k], 1, 0) for k in range(n)]
        
        idg = [cnf.add_var(syn_gate_pick = True, Name = 'id', bits = [k]) for k in range(n)]
        hg = [cnf.add_var(syn_gate_pick = True, Name = 'h', bits = [k]) for k in range(n)]
        tg = [cnf.add_var(syn_gate_pick = True, Name = 't', bits = [k]) for k in range(n)]
        # tdg = [cnf.add_var(syn_gate_pick = True, Name = 'tdg', bits = [k]) for k in range(n)]
        cg = [[cnf.add_var(syn_gate_pick = True, Name = 'cx', bits = [c,t]) if c!=t else None for t in range(n)] for c in range(n)]
        for k in range(n):
    
            # Implies(idg[k], Equivalent(X[k], x[k]))
            cnf.add_clause([ X[k], -idg[k], -x[k]])
            cnf.add_clause([-X[k], -idg[k],  x[k]])
            # Implies(idg[k], ~R[k])
            cnf.add_clause([-R[k], -idg[k]])
            # Implies(idg[k], ~U[k])
            cnf.add_clause([-U[k], -idg[k]])
            # Implies(idg[k], ~Wp[k])
            cnf.add_clause([-Wp[k], -idg[k]])
            # Implies(hg[k], Equivalent(R[k], X[k] & x[k]))
            cnf.add_clause([-R[k],  X[k], -hg[k]])
            cnf.add_clause([-R[k], -hg[k],  x[k]])
            cnf.add_clause([ R[k], -X[k], -hg[k], -x[k]])
            # Implies(hg[k], U[k])
            cnf.add_clause([ U[k], -hg[k]])
            # Implies(hg[k], ~Wp[k])
            cnf.add_clause([-Wp[k], -hg[k]])
            # Implies(tg[k], Equivalent(X[k], x[k]))
            cnf.add_clause([ X[k], -tg[k], -x[k]])
            cnf.add_clause([-X[k], -tg[k],  x[k]])
            # Implies(tg[k], ~R[k])
            cnf.add_clause([-R[k], -tg[k]])
            # Implies(tg[k], ~U[k])
            cnf.add_clause([-U[k], -tg[k]])
            # Implies(tg[k], Equivalent(Wp[k], x[k]))
            cnf.add_clause([ Wp[k], -tg[k], -x[k]])
            cnf.add_clause([-Wp[k], -tg[k],  x[k]])

            c = k
            for t in range(n):
                if t==c:
                    continue
    
                # Implies(cg[c][t], Equivalent(X[c], x[c]))
                cnf.add_clause([ X[c], -cg[c][t], -x[c]])
                cnf.add_clause([-X[c], -cg[c][t],  x[c]])
                # Implies(cg[c][t], Equivalent(X[t], x[c] ^ x[t]))
                cnf.add_clause([ X[t], -cg[c][t],  x[c], -x[t]])
                cnf.add_clause([ X[t], -cg[c][t], -x[c],  x[t]])
                cnf.add_clause([-X[t], -cg[c][t],  x[c],  x[t]])
                cnf.add_clause([-X[t], -cg[c][t], -x[c], -x[t]])
                # Implies(cg[c][t], ~R[c])
                cnf.add_clause([-R[c], -cg[c][t]])
                # Implies(cg[c][t], ~R[t])
                cnf.add_clause([-R[t], -cg[c][t]])
                # Implies(cg[c][t], ~U[c])
                cnf.add_clause([-U[c], -cg[c][t]])
                # Implies(cg[c][t], ~U[t])
                cnf.add_clause([-U[t], -cg[c][t]])
                # Implies(cg[c][t], ~Wp[c])
                cnf.add_clause([-Wp[c], -cg[c][t]])
                # Implies(cg[c][t], ~Wp[t])
                cnf.add_clause([-Wp[t], -cg[c][t]])

          
            cgs_k = [cg[k][i] for i in range(n) if i!=k] + [cg[i][k] for i in range(n) if i!=k]
            gate_controlers = [idg[k], hg[k], tg[k]]+cgs_k
            pauli2cnf.AMO(cnf, gate_controlers)
          
            if cnf.syn_gate_layer<=1:
                continue
        
            # H -> !l_H
            cnf.add_clause([-hg[k],  -cnf.get_syn_var_past_layer(Name ='h', bit = k)])
            # # T -> !l_Tdg
            # cnf.add_clause([-tg[k],  -cnf.get_syn_var_past_layer(Name ='tdg', bit = k)])
            # # Tdg -> !l_T
            # cnf.add_clause([-tdg[k], -cnf.get_syn_var_past_layer(Name ='t', bit = k)])
            # I -> I until CX
            cnf.add_clause([-cnf.get_syn_var_past_layer(Name ='id', bit = k), idg[k]] + cgs_k)

            # if cnf.syn_gate_layer>5:
            #     # T -> !l_T | !ll_T | !lll_T | !llll_T
            #     cnf.add_clause([-tg[k]] + [-cnf.get_syn_var_past_layer(Name ='t', bit = k, past=p) for p in range(1, 5)])
            #     # Tdg -> !l_Tdg | !ll_Tdg | !lll_Tdg | !llll_Tdg
            #     cnf.add_clause([-tdg[k]] + [-cnf.get_syn_var_past_layer(Name ='tdg', bit = k, past=p) for p in range(1, 5)])

            c = k
            for t in range(n):
                if c==t:
                    continue
                # CX(c,t) -> !past(CX(c,t))
                cnf.add_clause([-cg[c][t], -cnf.get_syn_var_past_layer(Name ='cx', bit = [c,t])])
                # CX(c,t) -> !past(I(c)) or !past(I(t))
                cnf.add_clause([-cg[c][t], -cnf.get_syn_var_past_layer(Name ='id', bit = c), -cnf.get_syn_var_past_layer(Name ='id', bit = t)])
          
        cnf.vars.x[:n] = X
    
    
    
