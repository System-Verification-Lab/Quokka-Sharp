# This code was generated by cliffordt2cnf_py_codegen.py.
import math
from decimal import Decimal, getcontext
getcontext().prec = 32

class cliffordt2cnf:
    # Equivalent(R, x[k] & z[k])
    def H2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R,  z[k]])
        cnf.add_clause([ R, -x[k], -z[k]])
        x[k], z[k] = z[k], x[k]

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k] & z[k])
    # Equivalent(Z, x[k] ^ z[k])
    def S2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z

        R = cnf.add_var()
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R,  z[k]])
        cnf.add_clause([ R, -x[k], -z[k]])

        Z = cnf.add_var()
        cnf.add_clause([ Z,  x[k], -z[k]])
        cnf.add_clause([ Z, -x[k],  z[k]])
        cnf.add_clause([-Z,  x[k],  z[k]])
        cnf.add_clause([-Z, -x[k], -z[k]])

        cnf.vars.z[k] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, z[k])
    def X2CNF(cnf, k):
        z = cnf.vars.z
        R = cnf.add_var()
        cnf.add_clause([ R, -z[k]])
        cnf.add_clause([-R,  z[k]])

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k] ^ z[k])
    def Y2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        cnf.add_clause([ R,  x[k], -z[k]])
        cnf.add_clause([ R, -x[k],  z[k]])
        cnf.add_clause([-R,  x[k],  z[k]])
        cnf.add_clause([-R, -x[k], -z[k]])

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k])
    def Z2CNF(cnf, k):
        x = cnf.vars.x
        R = cnf.add_var()
        cnf.add_clause([ R, -x[k]])
        cnf.add_clause([-R,  x[k]])

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k] & ~z[k])
    # Equivalent(Z, x[k] ^ z[k])
    def Sdg2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z

        R = cnf.add_var()
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R, -z[k]])
        cnf.add_clause([ R, -x[k],  z[k]])

        Z = cnf.add_var()
        cnf.add_clause([ Z,  x[k], -z[k]])
        cnf.add_clause([ Z, -x[k],  z[k]])
        cnf.add_clause([-Z,  x[k],  z[k]])
        cnf.add_clause([-Z, -x[k], -z[k]])

        cnf.vars.z[k] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k] & z[k] & ~Z)
    # x[k] | (Equivalent(Z, z[k]))
    # Equivalent(u, x[k])
    def T2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        Z = cnf.add_var()
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R,  z[k]])
        cnf.add_clause([-R, -Z])
        cnf.add_clause([ R,  Z, -x[k], -z[k]])

        cnf.add_clause([ Z,  x[k], -z[k]])
        cnf.add_clause([-Z,  x[k],  z[k]])

        u = cnf.add_var()
        cnf.add_clause([ u, -x[k]])
        cnf.add_clause([-u,  x[k]])
        cnf.add_weight(u, str(Decimal(1/2).sqrt()))

        cnf.vars.z[k] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, Z & x[k] & ~z[k])
    # x[k] | (Equivalent(Z, z[k]))
    # Equivalent(u, x[k])
    def Tdg2CNF(cnf, k):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        Z = cnf.add_var()
        cnf.add_clause([-R,  Z])
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R, -z[k]])
        cnf.add_clause([ R, -Z, -x[k],  z[k]])

        cnf.add_clause([ Z,  x[k], -z[k]])
        cnf.add_clause([-Z,  x[k],  z[k]])

        u = cnf.add_var()
        cnf.add_clause([ u, -x[k]])
        cnf.add_clause([-u,  x[k]])
        cnf.add_weight(u, str(Decimal(1/2).sqrt()))

        cnf.vars.z[k] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[c] & z[t] & (z[c] ^ ~x[t]))
    # Equivalent(X, x[c] ^ x[t])
    # Equivalent(Z, z[c] ^ z[t])
    def CNOT2CNF(cnf, c, t):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        Z = cnf.add_var()
        X = cnf.add_var()
        cnf.add_clause([-R,  x[c]])
        cnf.add_clause([-R,  z[t]])
        cnf.add_clause([-R,  x[t], -z[c]])
        cnf.add_clause([-R, -x[t],  z[c]])
        cnf.add_clause([ R, -x[c],  x[t],  z[c], -z[t]])
        cnf.add_clause([ R, -x[c], -x[t], -z[c], -z[t]])

        cnf.add_clause([ X,  x[c], -x[t]])
        cnf.add_clause([ X, -x[c],  x[t]])
        cnf.add_clause([-X,  x[c],  x[t]])
        cnf.add_clause([-X, -x[c], -x[t]])

        cnf.add_clause([ Z,  z[c], -z[t]])
        cnf.add_clause([ Z, -z[c],  z[t]])
        cnf.add_clause([-Z,  z[c],  z[t]])
        cnf.add_clause([-Z, -z[c], -z[t]])
        cnf.vars.x[t] = X
        cnf.vars.z[c] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[c] & x[t] & (z[c] ^ z[t]))
    # Equivalent(X, x[c] ^ x[t])
    # Equivalent(Z, z[c] ^ z[t])
    def CZ2CNF(cnf, c, t):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        Z1 = cnf.add_var()
        Z2 = cnf.add_var()
        cnf.add_clause([-R,  x[c]])
        cnf.add_clause([-R,  x[t]])
        cnf.add_clause([-R,  z[c],  z[t]])
        cnf.add_clause([-R, -z[c], -z[t]])
        cnf.add_clause([ R, -x[c], -x[t],  z[c], -z[t]])
        cnf.add_clause([ R, -x[c], -x[t], -z[c],  z[t]])

        cnf.add_clause([ Z1,  x[t], -z[c]])
        cnf.add_clause([ Z1, -x[t],  z[c]])
        cnf.add_clause([-Z1,  x[t],  z[c]])
        cnf.add_clause([-Z1, -x[t], -z[c]])

        cnf.add_clause([ Z2,  x[c], -z[t]])
        cnf.add_clause([ Z2, -x[c],  z[t]])
        cnf.add_clause([-Z2,  x[c],  z[t]])
        cnf.add_clause([-Z2, -x[c], -z[t]])

        cnf.vars.z[c] = Z1
        cnf.vars.z[t] = Z2

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, x[k] & z[k] & ~Z)
    # x[k] | (Equivalent(Z, z[k]))
    # Equivalent(u, x[k])
    def RZ2CNF(cnf, k, theta):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        Z = cnf.add_var()
        cnf.add_clause([-R,  x[k]])
        cnf.add_clause([-R,  z[k]])
        cnf.add_clause([-R, -Z])
        cnf.add_clause([ R,  Z, -x[k], -z[k]])

        cnf.add_clause([ Z,  x[k], -z[k]])
        cnf.add_clause([-Z,  x[k],  z[k]])

        u1 = cnf.add_var()
        cnf.add_clause([-u1,  x[k]])
        cnf.add_clause([ Z, -u1, -z[k]])
        cnf.add_clause([-Z, -u1,  z[k]])
        cnf.add_clause([ Z,  u1, -x[k],  z[k]])
        cnf.add_clause([-Z,  u1, -x[k], -z[k]])
        cnf.add_weight( u1, Decimal(math.cos(theta)))
        cnf.add_weight(-u1, 1)

        u2 = cnf.add_var()
        cnf.add_clause([-u2,  x[k]])
        cnf.add_clause([ Z, -u2,  z[k]])
        cnf.add_clause([-Z, -u2, -z[k]])
        cnf.add_clause([ Z,  u2, -x[k], -z[k]])
        cnf.add_clause([-Z,  u2, -x[k],  z[k]])
        cnf.add_weight( u2, Decimal(math.sin(theta)))
        cnf.add_weight(-u2, 1)
        cnf.vars.z[k] = Z

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    # Equivalent(R, X & z[k] & ~x[k])
    # z[k] | (Equivalent(X, x[k]))
    # Equivalent(u, x[k])
    def RX2CNF(cnf, k, theta):
        x = cnf.vars.x
        z = cnf.vars.z
        R = cnf.add_var()
        X = cnf.add_var()
        cnf.add_clause([-R,  X])
        cnf.add_clause([-R,  z[k]])
        cnf.add_clause([-R, -x[k]])
        cnf.add_clause([ R, -X,  x[k], -z[k]])

        cnf.add_clause([ X, -x[k],  z[k]])
        cnf.add_clause([-X,  x[k],  z[k]])

        u1 = cnf.add_var()
        cnf.add_clause([-u1,  z[k]])
        cnf.add_clause([ X, -u1, -x[k]])
        cnf.add_clause([-X, -u1,  x[k]])
        cnf.add_clause([ X,  u1,  x[k], -z[k]])
        cnf.add_clause([-X,  u1, -x[k], -z[k]])
        cnf.add_weight( u1, Decimal(math.cos(theta)))
        cnf.add_weight(-u1, 1)

        u2 = cnf.add_var()
        cnf.add_clause([-u2,  z[k]])
        cnf.add_clause([ X, -u2,  x[k]])
        cnf.add_clause([-X, -u2, -x[k]])
        cnf.add_clause([ X,  u2, -x[k], -z[k]])
        cnf.add_clause([-X,  u2,  x[k], -z[k]])
        cnf.add_weight( u2, Decimal(math.sin(theta)))
        cnf.add_weight(-u2, 1)
        cnf.vars.x[k] = X

        cnf.add_weight(-R, 1)
        cnf.add_weight(R, -1)

    def AMO(cnf, var_list):
        assert None not in var_list
        # at least one:
        cnf.add_claus(var_list)
        # at most one:
        [cnf.add_claus([-var_list[a],-var_list[b]]) for a in range(len(var_list)) for b in range(a+1, len(var_list))]


    def SynGate2CNF(cnf):
        x = cnf.vars.x
        z = cnf.vars.z
        X = [cnf.add_var() for _ in range(cnf.n)]
        Z = [cnf.add_var() for _ in range(cnf.n)]
        R = [cnf.add_var() for _ in range(cnf.n)]
        [cnf.add_weight(-R[k], 1) for k in range(cnf.n)]
        [cnf.add_weight(R[k], -1) for k in range(cnf.n)]
        czg = [[None]*cnf.n]*cnf.n
        for k in range(cnf.n):
            idg = cnf.add_var()
            hg = cnf.add_var()
            sg = cnf.add_var()
            tg = cnf.add_var()
            # (Implies(idg, ~R[k])) & (Implies(hg, Equivalent(X[k], z[k]))) & (Implies(hg, Equivalent(Z[k], x[k]))) & (Implies(idg, Equivalent(X[k], x[k]))) & (Implies(idg, Equivalent(Z[k], z[k]))) & (Implies(sg, Equivalent(X[k], x[k]))) & (Implies(tg, Equivalent(X[k], x[k]))) & (Implies(hg, Equivalent(R[k], x[k] & z[k]))) & (Implies(sg, Equivalent(R[k], x[k] & z[k]))) & (Implies(sg, Equivalent(Z[k], x[k] ^ z[k]))) & (x[k] | (Implies(tg, Equivalent(Z[k], z[k])))) & (Implies(tg, Equivalent(R[k], x[k] & z[k] & ~Z)))
            cnf.add_clause([-R[k], -idg])
            cnf.add_clause([-R[k],  X[k], -hg])
            cnf.add_clause([-R[k],  X[k], -tg])
            cnf.add_clause([ X[k], -hg, -z[k]])
            cnf.add_clause([ X[k], -idg, -x[k]])
            cnf.add_clause([ X[k], -sg, -x[k]])
            cnf.add_clause([ X[k], -tg, -x[k]])
            cnf.add_clause([-R[k],  Z[k], -hg])
            cnf.add_clause([ Z[k], -hg, -x[k]])
            cnf.add_clause([ Z[k], -idg, -z[k]])
            cnf.add_clause([-R[k], -sg,  x[k]])
            cnf.add_clause([-X[k], -idg,  x[k]])
            cnf.add_clause([-X[k], -tg,  x[k]])
            cnf.add_clause([-Z[k], -hg,  x[k]])
            cnf.add_clause([-R[k], -sg,  z[k]])
            cnf.add_clause([-R[k], -tg,  z[k]])
            cnf.add_clause([-X[k], -hg,  z[k]])
            cnf.add_clause([-Z[k], -idg,  z[k]])
            cnf.add_clause([-R[k], -Z, -tg])
            cnf.add_clause([ R[k],  Z[k], -sg, -z[k]])
            cnf.add_clause([ X[k],  Z[k], -tg, -z[k]])
            cnf.add_clause([ X[k], -Z[k], -tg,  z[k]])
            cnf.add_clause([-X[k],  Z[k], -sg,  z[k]])
            cnf.add_clause([-Z[k], -sg,  x[k],  z[k]])
            cnf.add_clause([ R[k], -hg, -x[k], -z[k]])
            cnf.add_clause([-X[k], -Z[k], -sg, -z[k]])
            cnf.add_clause([ R[k],  Z, -tg, -x[k], -z[k]])
            c = k
            for t in range(c+1, cnf.n):
                czg[c][t] = cnf.add_var()
                # (Implies(czg[c][t], Equivalent(X[c], x[c]))) & (Implies(czg[c][t], Equivalent(X[t], x[t]))) & (Implies(czg[c][t], Equivalent(Z[c], x[t] ^ z[c]))) & (Implies(czg[c][t], Equivalent(Z[t], x[c] ^ z[t]))) & (Implies(czg[c][t], Equivalent(R, x[c] & x[t] & (z[c] ^ z[t]))))
                cnf.add_clause([-R,  X[c], -czg[c][t]])
                cnf.add_clause([ X[c], -czg[c][t], -x[c]])
                cnf.add_clause([-R,  X[t], -czg[c][t]])
                cnf.add_clause([ X[t], -czg[c][t], -x[t]])
                cnf.add_clause([-R,  Z[c],  Z[t], -czg[c][t]])
                cnf.add_clause([ Z[c], -czg[c][t],  x[t], -z[c]])
                cnf.add_clause([-X[t],  Z[c], -czg[c][t],  z[c]])
                cnf.add_clause([ Z[t], -czg[c][t],  x[c], -z[t]])
                cnf.add_clause([-X[c],  Z[t], -czg[c][t],  z[t]])
                cnf.add_clause([-Z[t], -czg[c][t],  x[c],  z[t]])
                cnf.add_clause([-Z[c], -czg[c][t],  x[t],  z[c]])
                cnf.add_clause([-R, -czg[c][t],  z[c],  z[t]])
                cnf.add_clause([-X[c], -Z[t], -czg[c][t], -z[t]])
                cnf.add_clause([-X[t], -Z[c], -czg[c][t], -z[c]])
                cnf.add_clause([ R,  Z[c], -czg[c][t], -x[c], -z[c],  z[t]])
                cnf.add_clause([ R,  Z[t], -czg[c][t], -x[t],  z[c], -z[t]])
            gate_controlers = [idg, hg, sg, tg]+[czg[i][k] for i in range(k)]+[czg[k][i] for i in range(k+1,cnf.n)]
            cliffordt2cnf.AMO(cnf, gate_controlers)

