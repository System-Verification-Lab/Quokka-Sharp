from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols
from sympy import true

c = 0
t = 1
k = 2

i = symbols("i")
I = symbols('I')
r = symbols('r')
R = symbols('R')
u = symbols('u')
U = symbols('U')
D = symbols('D')

w = symbols('w')

x = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")
X    = symbols('X')
Xc   = symbols('Xc')
Xt   = symbols('Xt')



def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(func, prefix="", simplify=True, force=True, comment=None):
    print(prefix+"        # "+str(func))
    s = str(to_cnf(func, simplify=simplify, force=force))
    for a in s.split("&"):
        print(prefix+"        cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("]", end="")
        if comment: print(f", comment=\"{comment}\"", end="")
        print(f")")

def add_sign(func, prefix = "", comment=""):
    print(prefix+f"        # adding sign if {func}")
    print(prefix+"        R = cnf.add_var()")
    print(prefix+"        if cnf.weighted: ")
    print(prefix+"            cnf.add_weight(R, -1)")
    print(prefix+"            cnf.add_weight(-R, 1)")
    to_py(	                  Equivalent(R, func), prefix+"    ", comment="- "+comment)
    print(prefix+"        else: ")
    print(prefix+"            r = cnf.vars.r")
    print(prefix+"            cnf.vars.r = R")
    to_py(	                  Equivalent(R, r ^ func), prefix+"    ", comment="- "+comment)

def add_i(func, prefix = "", comment=""):
    print(prefix+f"        # adding i if {func}")
    print(prefix+"        I = cnf.add_var()")
    print(prefix+"        if cnf.weighted: ")
    print(prefix+"            cnf.add_weight(I, 0, 1)")
    print(prefix+"            cnf.add_weight(-I, 1, 0)")
    to_py(	                  Equivalent(I, func), prefix+"    ", comment="i "+comment)
    print(prefix+"        else: ")
    print(prefix+"            i = cnf.vars.i")
    to_py(	                  Equivalent(I, i ^ func), prefix+"    ", comment="i "+comment)
    add_sign(i & ~I, prefix+"    ")
    print(prefix+"            cnf.vars.i = I")

def add_sqrt_half(func, prefix = "", comment=""):
    print(prefix+"        U = cnf.add_var()")
    print(prefix+"        if cnf.weighted: ")
    print(prefix+"            cnf.add_weight(U, str(Decimal(1/2).sqrt()))")
    print(prefix+"            cnf.add_weight(-U, 1)")
    to_py(	                  Equivalent(U, func), prefix+"    ", comment="sqrt "+comment)
    print(prefix+"        else: ")
    print(prefix+"            cnf.power_two_normalisation += 0.5 ")
    print(prefix+"            u = cnf.vars.u")
    print(prefix+"            cnf.vars.u = U")
    to_py(	                  Equivalent(U, u ^ ~func), prefix+"    ", comment="sqrt U update "+comment)
    print()
    print(prefix+"            D = cnf.add_var()")
    print(prefix+f"            cnf.add_clause([D, cnf.add_var()], comment=\"sqrt D double {comment}\")")
    to_py(	                  Equivalent(D, u & ~U), prefix+"    ", comment="sqrt D update "+comment)

def main():

    print("# This code was generated by comput2cnf_py_codegen.py.")
    print("from decimal import Decimal")
    print("import math")
    print("from decimal import Decimal, getcontext")
    print("getcontext().prec = 32")
    print("from .pauli2cnf import pauli2cnf")
    print()
    print("class comput2cnf:")
    print()

    # H:
    print("    def H2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()   
    print("        X = cnf.add_var()")
    print()   
    add_sqrt_half(true)
    print()
    add_sign(x[k] & X)
    print()
    print("        cnf.vars.x[k] = X")
    print()

    #CNOT
    print("    def CNOT2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print()
    print("        Xt = cnf.add_var()")
    to_py(	       Equivalent(Xt, (x[c] ^ x[t])))
    print()
    print("        cnf.vars.x[t] = Xt")
    print()

    #TOFFOLI
    print("    def CCX2CNF(cnf, k, c, t):")
    print("        x = cnf.vars.x")
    print()
    print("        Xt = cnf.add_var()")
    to_py(	       Equivalent(Xt, ((x[k] & x[c]) ^ x[t])))
    print()
    print("        cnf.vars.x[t] = Xt")
    print()

    #Z
    print("    def Z2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()
    add_sign(x[k])
    print()

    #RZ(theta)
    print("    def RZ2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print()
    print("        w = cnf.add_var()")
    print("        cnf.add_weight(w, Decimal(math.cos(theta)), Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-w, 1, 0)")
    to_py(	       Equivalent(w, x[k]), comment="w (RZ)")
    print()

    #S
    print("    def S2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()
    add_i(x[k], comment="(S)")
    print()

    #Sdg
    print("    def Sdg2CNF(cnf, k):")
    print("        x = cnf.vars.x") 
    print("        if cnf.weighted: ")  # less variables 
    print("            w = cnf.add_var()")
    print("            cnf.add_weight(w, 0, -1)")
    print("            cnf.add_weight(-w, 1, 0)")
    to_py(	           Equivalent(w, x[k]), prefix="    ", comment="w (Sdg)")
    print("        else:")
    add_i(x[k], prefix="    ", comment="(Sdg)")
    print()
    add_sign(x[k], prefix="    ", comment="(Sdg)")
    print()

    #T
    print("    def T2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        if cnf.weighted: ")    
    print("            w = cnf.add_var()")
    print("            cnf.add_weight(w, str(Decimal(1/2).sqrt()), str(Decimal(1/2).sqrt()))")
    print("            cnf.add_weight(-w, 1, 0)")
    to_py(	           Equivalent(w, x[k]), prefix="    ", comment="w (T)")
    print("        else:")
    print("            i = cnf.vars.i")
    print()
    print("            I = cnf.add_var()")
    to_py(             x[k] | Equivalent(I, i), prefix="    ", comment="I (T)")
    print()
    add_sign(i & ~I, prefix="    ", comment="(T)")
    print()
    add_sqrt_half(x[k], prefix="    ", comment="(T)")
    print()
    print("            cnf.vars.i = I")

    #Tdg
    print("    def Tdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        if cnf.weighted: ")    
    print("            w = cnf.add_var()")
    print("            cnf.add_weight(w, str(Decimal(1/2).sqrt()), str(-Decimal(1/2).sqrt()))")
    print("            cnf.add_weight(-w, 1, 0)")
    to_py(	           Equivalent(w, x[k]), prefix="    ", comment="w (Tdg)")
    print("        else:")
    print("            i = cnf.vars.i")
    print()
    print("            I = cnf.add_var()")
    to_py(             x[k] | Equivalent(I, i), prefix="    ", comment="I (Tdg)")
    print()
    add_sign(~i & I, prefix="    ", comment="(Tdg)")
    print()
    add_sqrt_half(x[k], prefix="    ", comment="(Tdg)")
    print()
    print("            cnf.vars.i = I")

    #X
    print("    def X2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()
    print("        X = cnf.add_var()")
    to_py(         Equivalent(X, ~x[k]))
    print()
    print("        cnf.vars.x[k] = X")
    print()

    #Y
    print("    def Y2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print()
    print("        X = cnf.add_var()")
    to_py(         Equivalent(X, ~x[k]), comment="Y gate")
    print()
    add_sign(x[k])
    print()
    add_i(true)
    print()
    print("        cnf.vars.x[k] = X")
    print()

    #RX(theta)
    print("    def RX2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print()
    print("        w = cnf.add_var()")
    to_py(         Equivalent(w, Equivalent(x[k], X) ))
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print("        cnf.add_weight(w, Decimal(math.cos(theta/2)), 0)")
    print("        cnf.add_weight(-w, 0, -Decimal(math.sin(theta/2)))")
    print()

    #CZ
    print("    def CZ2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print()
    print("        Xc = cnf.add_var()")
    to_py(         Equivalent(Xc, x[c]))
    print()
    print("        Xt = cnf.add_var()")
    to_py(         Equivalent(Xt, x[t]))
    print()
    print("        cnf.vars.x[c] = Xc")
    print("        cnf.vars.x[t] = Xt")
    print()
    add_sign(x[c] & x[t])
    print()

 # Synthesis

    # dynamic single bit gate:

    idg   = symbols('idg[k]')
    hg    = symbols('hg[k]')
    tg    = symbols('tg[k]')
    tdg    = symbols('tdg[k]')

    Xk = symbols('X[k]')
    Rk = symbols('R[k]')    
    Uk = symbols('U[k]')
    Wpk = symbols('Wp[k]')
    Wnk = symbols('Wn[k]')

    I_x = idg >> Equivalent(Xk, x[k])
    I_r = idg >> Equivalent(Rk, False)
    I_u = idg >> Equivalent(Uk, False)
    I_w = idg >> Equivalent(Wpk, False)
    I_w = idg >> (Equivalent(Wpk, False) & Equivalent(Wnk, False))

    H_r = hg >> Equivalent(Rk, x[k] & Xk)
    H_u = hg >> Equivalent(Uk, True)
    H_w = hg >> Equivalent(Wpk, False)
    H_w = hg >> (Equivalent(Wpk, False) & Equivalent(Wnk, False))

    T_x = (tg | tdg) >> Equivalent(Xk, x[k])
    T_r = (tg | tdg) >> Equivalent(Rk, False)
    T_u = (tg | tdg) >> Equivalent(Uk, False)
    T_w = ((tg  >> (Equivalent(Wpk, x[k]) & Equivalent(Wnk, False))) &
           (tdg >> (Equivalent(Wnk, x[k]) & Equivalent(Wpk, False))) )

    single_qb_gate_properties = [I_x, I_r, I_u, I_w, H_r, H_u, H_w, T_x, T_r, T_u, T_w]
    
    # dynamic two bit gate:

    cg_ct    = symbols('cg[c][t]')
    Xcc = symbols('X[c]')
    Xtt = symbols('X[t]')
    Rc = symbols('R[c]')
    Rt = symbols('R[t]')
    Uc = symbols('U[c]')
    Ut = symbols('U[t]')
    Wpc = symbols('Wp[c]')
    Wpt = symbols('Wp[t]')
    Wnc = symbols('Wn[c]')
    Wnt = symbols('Wn[t]')

    CX_xc = cg_ct >> Equivalent(Xcc, x[c])
    CX_xt = cg_ct >> Equivalent(Xtt, x[t] ^ x[c])
    CX_rc = cg_ct >> Equivalent(Rc, False)
    CX_rt = cg_ct >> Equivalent(Rt, False)
    CX_uc = cg_ct >> Equivalent(Uc, False)
    CX_ut = cg_ct >> Equivalent(Ut, False)
    CX_wc = cg_ct >> (Equivalent(Wpc, False) & Equivalent(Wnc, False))
    CX_wt = cg_ct >> (Equivalent(Wpt, False) & Equivalent(Wnt, False))

    double_qb_gate_properties = [CX_xc, CX_xt, CX_rc, CX_rt, CX_uc, CX_ut, CX_wc, CX_wt]

    # CZ_xc = cg_ct >> Equivalent(Xc, x[c])
    # CZ_xt = cg_ct >> Equivalent(Xt, x[t])
    # CZ_zc = cg_ct >> Equivalent(Zc, z[c] ^ x[t])
    # CZ_zt = cg_ct >> Equivalent(Zt, z[t] ^ x[c])
    # CZ_rc = cg_ct >> Equivalent(Rc, x[t] & x[c] & (z[t] ^ z[c]))
    # CZ_rt = cg_ct >> Equivalent(Rt, False)
    # CZ_uc = cg_ct >> Equivalent(Uc, False)
    # CZ_ut = cg_ct >> Equivalent(Ut, False)

    # double_qb_gate_properties = [CZ_xc, CZ_xt, CZ_zc, CZ_zt, CZ_rc, CZ_rt, CZ_uc, CZ_ut]

    print()
    print()
    print('''
    def SynLayer2CNF(cnf):
        n = cnf.n
        x = cnf.vars.x
        X = [cnf.add_var() for _ in range(n)]
        R = [cnf.add_var() for _ in range(n)]
        U = [cnf.add_var() for _ in range(n)]
        Wp = [cnf.add_var() for _ in range(n)]
        Wn = [cnf.add_var() for _ in range(n)]
        [cnf.add_weight(R[k], -1) for k in range(n)]
        [cnf.add_weight(-R[k], 1) for k in range(n)]
        [cnf.add_weight(U[k], str(Decimal(1/2).sqrt())) for k in range(n)]
        [cnf.add_weight(-U[k], 1) for k in range(n)]
        [cnf.add_weight(Wp[k], str(Decimal(1/2).sqrt()), str(Decimal(1/2).sqrt())) for k in range(n)]
        [cnf.add_weight(-Wp[k], 1, 0) for k in range(n)]
        [cnf.add_weight(Wn[k], str(Decimal(1/2).sqrt()), str(-Decimal(1/2).sqrt())) for k in range(n)]
        [cnf.add_weight(-Wn[k], 1, 0) for k in range(n)]
        
        idg = [cnf.add_var(syn_gate_pick = True, Name = 'id', bits = [k]) for k in range(n)]
        hg = [cnf.add_var(syn_gate_pick = True, Name = 'h', bits = [k]) for k in range(n)]
        tg = [cnf.add_var(syn_gate_pick = True, Name = 't', bits = [k]) for k in range(n)]
        tdg = [cnf.add_var(syn_gate_pick = True, Name = 'tdg', bits = [k]) for k in range(n)]
        cg = [[cnf.add_var(syn_gate_pick = True, Name = 'cx', bits = [c,t]) if c!=t else None for t in range(n)] for c in range(n)]
        for k in range(n):
    ''')
    for p in single_qb_gate_properties:
        to_py(	       p, prefix="    ")  
    print('''
            c = k
            for t in range(n):
                if t==c:
                    continue
    ''')
    for p in double_qb_gate_properties:
        to_py(	           p, prefix="        ")   
    print('''
          
            cgs_k = [cg[k][i] for i in range(n) if i!=k] + [cg[i][k] for i in range(n) if i!=k]
            gate_controlers = [idg[k], hg[k], tg[k], tdg[k]]+cgs_k
            pauli2cnf.AMO(cnf, gate_controlers)
          
            if cnf.syn_gate_layer<=1:
                continue
        
            # H -> !l_H
            cnf.add_clause([-hg[k],  -cnf.get_syn_var_past_layer(Name ='h', bit = k)])
            # T -> !l_Tdg
            cnf.add_clause([-tg[k],  -cnf.get_syn_var_past_layer(Name ='tdg', bit = k)])
            # Tdg -> !l_T
            cnf.add_clause([-tdg[k], -cnf.get_syn_var_past_layer(Name ='t', bit = k)])
            # I -> I until CX
            cnf.add_clause([-cnf.get_syn_var_past_layer(Name ='id', bit = k), idg[k]] + cgs_k)

            if cnf.syn_gate_layer>5:
                # T -> !l_T | !ll_T | !lll_T | !llll_T
                cnf.add_clause([-tg[k]] + [-cnf.get_syn_var_past_layer(Name ='t', bit = k, past=p) for p in range(1, 5)])
                # Tdg -> !l_Tdg | !ll_Tdg | !lll_Tdg | !llll_Tdg
                cnf.add_clause([-tdg[k]] + [-cnf.get_syn_var_past_layer(Name ='tdg', bit = k, past=p) for p in range(1, 5)])

            c = k
            for t in range(n):
                if c==t:
                    continue
                # CX(c,t) -> !past(CX(c,t))
                cnf.add_clause([-cg[c][t], -cnf.get_syn_var_past_layer(Name ='cx', bit = [c,t])])
                # CX(c,t) -> !past(I(c)) or !past(I(t))
                cnf.add_clause([-cg[c][t], -cnf.get_syn_var_past_layer(Name ='id', bit = c), -cnf.get_syn_var_past_layer(Name ='id', bit = t)])
          
        cnf.vars.x[:n] = X
    
    
    ''')



if __name__ == "__main__":
    main()
