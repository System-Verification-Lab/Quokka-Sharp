from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols

c = 0
t = 1
k = 2

h    = symbols('h')

x = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")

X    = symbols('X')
Xc   = symbols('Xc')
Xt   = symbols('Xt')

def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(s):
    for a in s.split("&"):
        print("        cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("])")

def main():

    print("# This code was generated by comput2cnf_py_codegen.py.")
    print("from decimal import Decimal")
    print("import math")
    print("from decimal import Decimal, getcontext")
    print("getcontext().prec = 32")
    print()
    print("class comput2cnf:")
    print()

    # H:
    F = Equivalent(h, (~x[k] | ~X) )
    C = to_cnf(F, True, True)

    print("    def H2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print("        h = cnf.add_var()")
    print()
    print("        # "+ str(F))
    to_py(      str(C))
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print(f"        cnf.add_weight( h,  Decimal(1/2).sqrt())")
    print(f"        cnf.add_weight(-h, -Decimal(1/2).sqrt())")
    print()

    # Y:
    Fx = Equivalent(X, ~x[k])
    Cx = to_cnf(Fx, True, True)

    Fh = Equivalent(h, ~x[k])
    Ch = to_cnf(Fh, True, True)

    print("    def Y2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print("        h = cnf.add_var()")
    print()
    print("        # "+ str(Fx))
    to_py(      str(Cx))
    print()
    print("        # "+ str(Fh))
    to_py(      str(Ch))
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print(f"        cnf.add_weight( h, 0,  1)")
    print(f"        cnf.add_weight(-h, 0, -1)")
    print()


    #CNOT
    Fc = Equivalent(Xc, x[c])
    Cc = to_cnf(Fc, True, True)

    Ft = Equivalent(Xt, (x[c] ^ x[t]))
    Ct = to_cnf(Ft, True, True)

    print("    def CNOT2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        Xc = cnf.add_var()")
    print("        Xt = cnf.add_var()")
    print()
    print("        # "+ str(Fc))
    to_py(	   str(Cc))
    print()
    print("        # "+ str(Ft))
    to_py(	   str(Ct))
    print()
    print("        cnf.vars.x[c] = Xc")
    print("        cnf.vars.x[t] = Xt")
    print()
  

    #RZ(theta)
    Fx = Equivalent(X, x[k])
    Cx = to_cnf(Fx, True, True)

    Frz = Equivalent(h, x[k])
    Crz = to_cnf(Frz, True, True)

    print("    def RZ2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print("        h = cnf.add_var()")
    print()
    print("        # "+ str(Fx))
    to_py(	   str(Cx))
    print()
    print("        # "+ str(Frz))
    to_py(	   str(Crz))
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print(f"        cnf.add_weight(h, Decimal(math.cos(theta/2)), Decimal(math.sin(theta/2)))")
    print(f"        cnf.add_weight(-h, Decimal(math.cos(theta/2)), -Decimal(math.sin(theta/2)))")
    print()

    #Z
    print("    def Z2CNF(cnf, k):")
    print("        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi))")
    print()

    #S
    print("    def S2CNF(cnf, k):")
    print("        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi/2))")
    print()
    #Sdg
    print("    def Sdg2CNF(cnf, k):")
    print("        comput2cnf.RZ2CNF(cnf, k, Decimal(-math.pi/2))")
    print()

    #T
    print("    def T2CNF(cnf, k):")
    print("        comput2cnf.RZ2CNF(cnf, k, Decimal(math.pi/4))")
    print()
    #Tdg
    print("    def Tdg2CNF(cnf, k):")
    print("        comput2cnf.RZ2CNF(cnf, k, Decimal(-math.pi/4))")
    print()

    # X:
    F = Equivalent(X, ~x[k])
    C = to_cnf(F, True, True)

    print("    def X2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print()
    print("        # "+ str(F))
    to_py(      str(C))
    print()
    print("        cnf.vars.x[k] = X")
    print()

    #RX(theta)
    F = Equivalent(h, Equivalent(x[k], X) )
    C = to_cnf(F, True, True)

    print("    def RX2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        X = cnf.add_var()")
    print("        h = cnf.add_var()")
    print()
    print("        # "+ str(F))
    to_py(      str(C))
    print()
    print("        cnf.vars.x[k] = X")
    print()
    print(f"        cnf.add_weight(h, Decimal(math.cos(theta/2)), 0)")
    print(f"        cnf.add_weight(-h, 0, -Decimal(math.sin(theta/2)))")
    print()



    #CZ
    Fc = Equivalent(Xc, x[c])
    Cc = to_cnf(Fc, True, True)

    Ft = Equivalent(Xt, x[t])
    Ct = to_cnf(Ft, True, True)

    Fh = Equivalent(h, (x[c] & x[t]))
    Ch = to_cnf(Fh, True, True)

    print("    def CZ2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        Xc = cnf.add_var()")
    print("        Xt = cnf.add_var()")
    print("        h = cnf.add_var()")
    print()
    print("        # "+ str(Fc))
    to_py(      str(Cc))
    print()
    print("        # "+ str(Ft))
    to_py(      str(Ct))
    print()
    print("        # "+ str(Fh))
    to_py(      str(Ch))
    print()
    print("        cnf.vars.x[c] = Xc")
    print("        cnf.vars.x[t] = Xt")
    print()
    print(f"        cnf.add_weight( h, 0, -1)")
    print(f"        cnf.add_weight(-h, 0,  1)")
    print()




if __name__ == "__main__":
    main()