from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols

c = 0
t = 1
k = 2

u    = symbols('u')
u1    = symbols('u1')
u2    = symbols('u2')
r    = symbols('r')
R    = symbols('R')

x = [0,0,0]
z = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")
z[k] = symbols("z[k]")
z[c] = symbols("z[c]")
z[t] = symbols("z[t]")

X    = symbols('X')
Z    = symbols('Z')

def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(s, prefix = ""):
    for a in s.split("&"):
        print(prefix+"        cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("])")

def main():

    print("# This code was generated by cliffordt2cnf_py_codegen.py.")
    print("import math")
    print("from decimal import Decimal, getcontext")
    print("getcontext().prec = 32")
    print()
    print("class cliffordt2cnf:")

    # H:
    F = Equivalent(R, x[k] & z[k])

    C = to_cnf(F, True, True)
    print("    # "+ str(F))
    print("    def H2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(C))
    print("        x[k], z[k] = z[k], x[k]")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # S:
    Fr = Equivalent(R, x[k] & z[k])
    Cr = to_cnf(Fr, True, True)

    Fz = Equivalent(Z, x[k] ^ z[k])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    def S2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    print("        Z = cnf.add_var()")
    to_py(	       str(Cz))
    print()
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # X:
    Fr = Equivalent(R, z[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def X2CNF(cnf, k):")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.x[k] = -cnf.vars.x[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # Y:
    Fr = Equivalent(R, x[k] ^ z[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def Y2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.x[k] = -cnf.vars.x[k]")
    # print("        cnf.vars.z[k] = -cnf.vars.z[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # Z:
    Fr = Equivalent(R, x[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def Z2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.z[k] = -cnf.vars.z[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #Sdg
    Fr = Equivalent(R, x[k] & ~z[k])
    Cr = to_cnf(Fr, True, True)

    Fz = Equivalent(Z, x[k] ^ z[k])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    def Sdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    print("        Z = cnf.add_var()")
    to_py(	       str(Cz))
    print()
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()    
    
    
    #T
    Fr = Equivalent(R, x[k] & z[k] & ~Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu = Equivalent(u, x[k])
    Cu = to_cnf(Fu, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def T2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))

    print()   
    print("        u = cnf.add_var()")
    to_py(	       str(Cu))
    print("        cnf.add_weight(u, str(Decimal(1/2).sqrt()))")
    print("        cnf.add_weight(-u, 1)")
    print()   
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #Tdag
    Fr = Equivalent(R, x[k] & ~z[k] & Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu = Equivalent(u, x[k])
    Cu = to_cnf(Fu, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def Tdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))
    print()   
    print("        u = cnf.add_var()")
    to_py(	       str(Cu))
    print("        cnf.add_weight(u, str(Decimal(1/2).sqrt()))")
    print("        cnf.add_weight(-u, 1)")

    print()   
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #CNOT
    Fr = Equivalent(R, x[c] & z[t] & (~x[t] ^ z[c]))
    Cr = to_cnf(Fr, True, True)

    Fx = Equivalent(X, x[t] ^ x[c])
    Cx = to_cnf(Fx, True, True)

    Fz = Equivalent(Z, z[t] ^ z[c])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fz))
    print("    def CNOT2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    print("        X = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cx))
    print()
    to_py(	       str(Cz))
    print("        cnf.vars.x[t] = X")
    print("        cnf.vars.z[c] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()
    
    #CZ
    Z1    = symbols('Z1')
    Z2    = symbols('Z2')
    Fr = Equivalent(R, x[t] & x[c] & (z[t] ^ z[c]))
    Cr = to_cnf(Fr, True, True)

    Fz1 = Equivalent(Z1, z[c] ^ x[t])
    Cz1 = to_cnf(Fz1, True, True)

    Fz2 = Equivalent(Z2, z[t] ^ x[c])
    Cz2 = to_cnf(Fz2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fz))
    print("    def CZ2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z1 = cnf.add_var()")
    print("        Z2 = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz1))
    print()
    to_py(	       str(Cz2))
    print()
    print("        cnf.vars.z[c] = Z1")
    print("        cnf.vars.z[t] = Z2")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #RZ
    Fr = Equivalent(R, x[k] & z[k] & ~Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu1 = Equivalent(u1, x[k] & (((z[k] & Z)) | (~z[k] & ~Z)))
    Cu1 = to_cnf(Fu1, True, True)

    Fu2 = Equivalent(u2, x[k] & (((~z[k] & Z)) | (z[k] & ~Z)))
    Cu2 = to_cnf(Fu2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def RZ2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))

    print()   
    print("        u1 = cnf.add_var()")
    to_py(	       str(Cu1))
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    print()   

    print("        u2 = cnf.add_var()")
    to_py(	       str(Cu2))
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")

    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #RX
    Fr = Equivalent(R, z[k] & ~x[k] & X)
    Cr = to_cnf(Fr, True, True)

    Fx = z[k] | Equivalent(X, x[k])
    Cx = to_cnf(Fx, True, True)

    Fu1 = Equivalent(u1, z[k] & ((x[k] & X) | (~x[k] & ~X)))
    Cu1 = to_cnf(Fu1, True, True)

    Fu2 = Equivalent(u2, z[k] & ((~x[k] & X) | (x[k] & ~X)))
    Cu2 = to_cnf(Fu2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fu))
    print("    def RX2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        X = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cx))

    print()   
    print("        u1 = cnf.add_var()")
    to_py(	       str(Cu1))
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    print()   

    print("        u2 = cnf.add_var()")
    to_py(	       str(Cu2))
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")

    print("        cnf.vars.x[k] = X")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()
  
  
    
    # Synthesis

    # dynamic single bit gate:

    idg    = symbols('idg')
    hg    = symbols('hg')
    sg    = symbols('sg')
    tg    = symbols('tg')

    Xk = symbols('X[k]')
    Zk = symbols('Z[k]')
    Rk = symbols('R[k]')
    Uk = symbols('U[k]')

    I_r = idg >> Equivalent(Rk, False)
    I_x = idg >> Equivalent(Xk, x[k])
    I_z = idg >> Equivalent(Zk, z[k])
    I_u = idg >> Equivalent(Uk, False)

    H_r = hg >> Equivalent(Rk, x[k] & z[k])
    H_x = hg >> Equivalent(Xk, z[k])
    H_z = hg >> Equivalent(Zk, x[k])
    H_u = hg >> Equivalent(Uk, False)

    S_r = sg >> Equivalent(Rk, x[k] & z[k])
    S_x = sg >> Equivalent(Xk, x[k])
    S_z = sg >> Equivalent(Zk, x[k] ^ z[k])
    S_u = sg >> Equivalent(Uk, False)

    T_r = tg >> Equivalent(Rk, x[k] & z[k] & ~Zk)
    T_x = tg >> Equivalent(Xk, x[k])
    T_z = tg >> Equivalent(Zk, z[k]) | x[k]
    T_u = tg >> Equivalent(Uk, x[k])

    single_qb_gate_properties = [I_r, I_x, I_z, I_u, H_r, H_x, H_z, H_u, S_r, S_x, S_z, S_u, T_r, T_x, T_z, T_u]
    

    # dynamic two bit gate:

    czg_ct    = symbols('czg[c][t]')
    Xc = symbols('X[c]')
    Xt = symbols('X[t]')
    Zc = symbols('Z[c]')
    Zt = symbols('Z[t]')
    Rc = symbols('R[c]')
    Rt = symbols('R[t]')
    Uc = symbols('U[c]')
    Ut = symbols('U[t]')

    CZ_xc = czg_ct >> Equivalent(Xc, x[c])
    CZ_xt = czg_ct >> Equivalent(Xt, x[t])
    CZ_zc = czg_ct >> Equivalent(Zc, z[c] ^ x[t])
    CZ_zt = czg_ct >> Equivalent(Zt, z[t] ^ x[c])
    CZ_rc = czg_ct >> Equivalent(Rc, x[t] & x[c] & (z[t] ^ z[c]))
    CZ_rt = czg_ct >> Equivalent(Rt, False)
    CZ_uc = czg_ct >> Equivalent(Uc, False)
    CZ_ut = czg_ct >> Equivalent(Ut, False)

    double_qb_gate_properties = [CZ_xc, CZ_xt, CZ_zc, CZ_zt, CZ_rc, CZ_rt, CZ_uc, CZ_ut]

    print("    def AMO(cnf, var_list):")
    print("        assert None not in var_list")
    print("        # at least one:")
    print("        cnf.add_clause(var_list)")
    print("        # at most one:")
    print("        [cnf.add_clause([-var_list[a],-var_list[b]]) for a in range(len(var_list)) for b in range(a+1, len(var_list))]")
    print()
    print()
    print("    def SynGate2CNF(cnf):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        X = [cnf.add_var() for _ in range(cnf.n)]")
    print("        Z = [cnf.add_var() for _ in range(cnf.n)]")
    print("        R = [cnf.add_var() for _ in range(cnf.n)]")
    print("        U = [cnf.add_var() for _ in range(cnf.n)]")
    print("        [cnf.add_weight(R[k], -1) for k in range(cnf.n)]")
    print("        [cnf.add_weight(-R[k], 1) for k in range(cnf.n)]")
    print("        [cnf.add_weight(U[k], str(Decimal(1/2).sqrt())) for k in range(cnf.n)]")
    print("        [cnf.add_weight(-U[k], 1) for k in range(cnf.n)]")
    print("        czg = [[None for _ in range(cnf.n)] for _ in range(cnf.n)]")
    print("        for k in range(cnf.n):")
    print("            idg = cnf.add_var(syn_gate_pick = True, Name = 'id', bits = [k])")
    print("            hg = cnf.add_var(syn_gate_pick = True, Name = 'h', bits = [k])")
    print("            sg = cnf.add_var(syn_gate_pick = True, Name = 's', bits = [k])")
    print("            tg = cnf.add_var(syn_gate_pick = True, Name = 't', bits = [k])")
    for p in single_qb_gate_properties:
        print("        # " + str(p))
        to_py(	       str(to_cnf(p, True, True)), prefix="    ")
    print("            c = k")
    print("            for t in range(c+1, cnf.n):")
    print("                czg[c][t] = cnf.add_var(syn_gate_pick = True, Name = 'cz', bits = [c,t])")
    for p in double_qb_gate_properties:
        print("            # " + str(p))
        to_py(	           str(to_cnf(p, True, True)), prefix="        ")
    print("            gate_controlers = [idg, hg, sg, tg]+[czg[i][k] for i in range(k)]+[czg[k][i] for i in range(k+1,cnf.n)]")
    print("            cliffordt2cnf.AMO(cnf, gate_controlers)")
    print()
    print("        cnf.vars.x = X")
    print("        cnf.vars.z = Z")
    print()



if __name__ == "__main__":
    main()