from sympy.logic.boolalg import *
from sympy.logic import simplify_logic
from sympy import symbols

c = 0
t = 1
k = 2

u    = symbols('u')
u1    = symbols('u1')
u2    = symbols('u2')
r    = symbols('r')
R    = symbols('R')

x = [0,0,0]
z = [0,0,0]
x[k] = symbols("x[k]")
x[c] = symbols("x[c]")
x[t] = symbols("x[t]")
z[k] = symbols("z[k]")
z[c] = symbols("z[c]")
z[t] = symbols("z[t]")

X    = symbols('X')
Z    = symbols('Z')

def strstrip(item1):
    return item1.lstrip(' ()~')

def to_py(s):
    for a in s.split("&"):
        print("        cnf.add_clause([", end="")
        l = a.split("|")
        l.sort(key=strstrip)
        for x in l:
            b = x.strip(' ()')
            if b.startswith('~'):
                b = b.replace('~', '-')
            else:
                b = " "+ b
            print(b, end="")
            if x != l[-1]:
                print(", ", end="")
        print("])")

def main():

    print("# This code was generated by cliffordt2cnf_py_codegen.py.")
    print("import math")
    print("from decimal import Decimal, getcontext")
    print("getcontext().prec = 32")
    print()
    print("class cliffordt2cnf:")

    # H:
    F = Equivalent(R, x[k] & z[k])

    C = to_cnf(F, True, True)
    print("    # "+ str(F))
    print("    def H2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(C))
    print("        x[k], z[k] = z[k], x[k]")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # S:
    Fr = Equivalent(R, x[k] & z[k])
    Cr = to_cnf(Fr, True, True)

    Fz = Equivalent(Z, x[k] ^ z[k])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    def S2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    print("        Z = cnf.add_var()")
    to_py(	       str(Cz))
    print()
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # X:
    Fr = Equivalent(R, z[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def X2CNF(cnf, k):")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.x[k] = -cnf.vars.x[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # Y:
    Fr = Equivalent(R, x[k] ^ z[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def Y2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.x[k] = -cnf.vars.x[k]")
    # print("        cnf.vars.z[k] = -cnf.vars.z[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    # Z:
    Fr = Equivalent(R, x[k])
    Cr = to_cnf(Fr, True, True)

    print("    # "+ str(Fr))
    print("    def Z2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    # print("        cnf.vars.z[k] = -cnf.vars.z[k]")
    # print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #Sdg
    Fr = Equivalent(R, x[k] & ~z[k])
    Cr = to_cnf(Fr, True, True)

    Fz = Equivalent(Z, x[k] ^ z[k])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    def Sdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print()
    print("        R = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    print("        Z = cnf.add_var()")
    to_py(	       str(Cz))
    print()
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()    
    
    
    #T
    Fr = Equivalent(R, x[k] & z[k] & ~Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu = Equivalent(u, x[k])
    Cu = to_cnf(Fu, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def T2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))

    print()   
    print("        u = cnf.add_var()")
    to_py(	       str(Cu))
    print("        cnf.add_weight(u, str(Decimal(1/2).sqrt()))")
    print()   
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #Tdag
    Fr = Equivalent(R, x[k] & ~z[k] & Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu = Equivalent(u, x[k])
    Cu = to_cnf(Fu, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def Tdg2CNF(cnf, k):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))
    print()   
    print("        u = cnf.add_var()")
    to_py(	       str(Cu))
    print("        cnf.add_weight(u, str(Decimal(1/2).sqrt()))")
    print()   
    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #CNOT
    Fr = Equivalent(R, x[c] & z[t] & (~x[t] ^ z[c]))
    Cr = to_cnf(Fr, True, True)

    Fx = Equivalent(X, x[t] ^ x[c])
    Cx = to_cnf(Fx, True, True)

    Fz = Equivalent(Z, z[t] ^ z[c])
    Cz = to_cnf(Fz, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fz))
    print("    def CNOT2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    print("        X = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cx))
    print()
    to_py(	       str(Cz))
    print("        cnf.vars.x[t] = X")
    print("        cnf.vars.z[c] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()
    
    #CZ
    Z1    = symbols('Z1')
    Z2    = symbols('Z2')
    Fr = Equivalent(R, x[t] & x[c] & (z[t] ^ z[c]))
    Cr = to_cnf(Fr, True, True)

    Fz1 = Equivalent(Z1, z[c] ^ x[t])
    Cz1 = to_cnf(Fz1, True, True)

    Fz2 = Equivalent(Z2, z[t] ^ x[c])
    Cz2 = to_cnf(Fz2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fz))
    print("    def CZ2CNF(cnf, c, t):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z1 = cnf.add_var()")
    print("        Z2 = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz1))
    print()
    to_py(	       str(Cz2))
    print()
    print("        cnf.vars.z[c] = Z1")
    print("        cnf.vars.z[t] = Z2")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #RZ
    Fr = Equivalent(R, x[k] & z[k] & ~Z)
    Cr = to_cnf(Fr, True, True)

    Fz = x[k] | Equivalent(Z, z[k])
    Cz = to_cnf(Fz, True, True)

    Fu1 = Equivalent(u1, x[k] & (((z[k] & Z)) | (~z[k] & ~Z)))
    Cu1 = to_cnf(Fu1, True, True)

    Fu2 = Equivalent(u2, x[k] & (((~z[k] & Z)) | (z[k] & ~Z)))
    Cu2 = to_cnf(Fu2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fz))
    print("    # "+ str(Fu))
    print("    def RZ2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        Z = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cz))

    print()   
    print("        u1 = cnf.add_var()")
    to_py(	       str(Cu1))
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    print()   

    print("        u2 = cnf.add_var()")
    to_py(	       str(Cu2))
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")

    print("        cnf.vars.z[k] = Z")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()

    #RX
    Fr = Equivalent(R, z[k] & ~x[k] & X)
    Cr = to_cnf(Fr, True, True)

    Fx = z[k] | Equivalent(X, x[k])
    Cx = to_cnf(Fx, True, True)

    Fu1 = Equivalent(u1, z[k] & ((x[k] & X) | (~x[k] & ~X)))
    Cu1 = to_cnf(Fu1, True, True)

    Fu2 = Equivalent(u2, z[k] & ((~x[k] & X) | (x[k] & ~X)))
    Cu2 = to_cnf(Fu2, True, True)

    print("    # "+ str(Fr))
    print("    # "+ str(Fx))
    print("    # "+ str(Fu))
    print("    def RX2CNF(cnf, k, theta):")
    print("        x = cnf.vars.x")
    print("        z = cnf.vars.z")
    print("        R = cnf.add_var()")
    print("        X = cnf.add_var()")
    to_py(	       str(Cr))
    print()
    to_py(	       str(Cx))

    print()   
    print("        u1 = cnf.add_var()")
    to_py(	       str(Cu1))
    print("        cnf.add_weight( u1, Decimal(math.cos(theta)))")
    print("        cnf.add_weight(-u1, 1)")
    print()   

    print("        u2 = cnf.add_var()")
    to_py(	       str(Cu2))
    print("        cnf.add_weight( u2, Decimal(math.sin(theta)))")
    print("        cnf.add_weight(-u2, 1)")

    print("        cnf.vars.x[k] = X")
    print()
    print("        cnf.add_weight(-R, 1)")
    print("        cnf.add_weight(R, -1)")
    print()
  


if __name__ == "__main__":
    main()